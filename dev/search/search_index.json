{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pytanis \u00b6 Utilities for the program organization of conferences using Pretalx! This is a pre-alpha version! Don't use it! Features \u00b6 in development ... License \u00b6 Pytanis is distributed under the terms of the MIT license. Navigation \u00b6 Documentation for specific MAJOR.MINOR versions can be chosen by using the dropdown on the top of every page. The dev version reflects changes that have not yet been released. Also, desktop readers can use special keyboard shortcuts: Keys Action , (comma) p Navigate to the \"previous\" page . (period) n Navigate to the \"next\" page / s Display the search modal","title":"About"},{"location":"#pytanis","text":"Utilities for the program organization of conferences using Pretalx! This is a pre-alpha version! Don't use it!","title":"Pytanis"},{"location":"#features","text":"in development ...","title":"Features"},{"location":"#license","text":"Pytanis is distributed under the terms of the MIT license.","title":"License"},{"location":"#navigation","text":"Documentation for specific MAJOR.MINOR versions can be chosen by using the dropdown on the top of every page. The dev version reflects changes that have not yet been released. Also, desktop readers can use special keyboard shortcuts: Keys Action , (comma) p Navigate to the \"previous\" page . (period) n Navigate to the \"next\" page / s Display the search modal","title":"Navigation"},{"location":"authors/","text":"Contributors \u00b6 Florian Wilhelm Florian.Wilhelm@gmail.com","title":"Authors"},{"location":"authors/#contributors","text":"Florian Wilhelm Florian.Wilhelm@gmail.com","title":"Contributors"},{"location":"changelog/","text":"Changelog \u00b6 Version 0.0.1 (development) \u00b6 First pre-alpha to have a starting base","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#version-001-development","text":"First pre-alpha to have a starting base","title":"Version 0.0.1 (development)"},{"location":"contributing/","text":"Contributing \u00b6 Welcome to the contributor guide of Pytanis. This document focuses on getting any potential contributor familiarized with the development processes, but other kinds of contributions are also appreciated. If you are new to using git or have never collaborated in a project previously, please have a look at contribution-guide.org . Other resources are also listed in the excellent guide created by Freecodecamp 1 . Please notice, all users and contributors are expected to be open, considerate, reasonable, and respectful . When in doubt, Python Software Foundation's Code of Conduct is a good reference in terms of behavior guidelines. Issue Reports \u00b6 If you experience bugs or general issues with Pytanis, please have a look on the issue tracker . If you don't see anything useful there, please feel free to fire an issue report. Tip Please don't forget to include the closed issues in your search. Sometimes a solution was already reported, and the problem is considered solved . New issue reports should include information about your programming environment (e.g., operating system, Python version) and steps to reproduce the problem. Please try also to simplify the reproduction steps to a very minimal example that still illustrates the problem you are facing. By removing other factors, you help us to identify the root cause of the issue. Documentation improvements \u00b6 You can help to the documentation of Pytanis by making them more readable and coherent, or by adding missing information and correcting mistakes. The documentation uses mkdocs as its main documentation compiler. This means that the docs are kept in the same repository as the project code, and that any documentation update is done in the same way was a code contribution. Tip Please notice that the GitHub web interface provides a quick way of propose changes in Pytanis 's files. While this mechanism can be tricky for normal code contributions, it works perfectly fine for contributing to the docs, and can be quite handy. If you are interested in trying this method out, please navigate to the docs folder in the source repository , find which file you would like to propose changes and click in the little pencil icon at the top, to open GitHub's code editor . Once you finish editing the file, please write a message in the form at the bottom of the page describing which changes have you made and what are the motivations behind them and submit your proposal. When working on documentation changes in your local machine, you can build and serve them using hatch with hatch run docs:build and hatch run docs:serve , respectively. Code Contributions \u00b6 Submit an issue \u00b6 Before you work on any non-trivial code contribution it's best to first create a report in the issue tracker to start a discussion on the subject. This often provides additional considerations and avoids unnecessary work. Clone the repository \u00b6 Create a user account on GitHub if you do not already have one. Fork the project repository : click on the Fork button near the top of the page. This creates a copy of the code under your account on GitHub. Clone this copy to your local disk: git clone git@github.com:YourLogin/pytanis.git cd pytanis Make sure hatch is installed using pipx : pipx install hatch [only once] install pre-commit hooks in the default environment with: hatch run pre-commit install Implement your changes \u00b6 Create a branch to hold your changes: git checkout -b my-feature and start making changes. Never work on the main branch! Start your work on this branch. Don't forget to add docstrings in Google style to new functions, modules and classes, especially if they are part of public APIs. Add yourself to the list of contributors in AUTHORS.md . When you\u2019re done editing, do: git add <MODIFIED FILES> git commit to record your changes in git . Please make sure to see the validation messages from pre-commit and fix any eventual issues. This should automatically use flake8 / black to check/fix the code style in a way that is compatible with the project. Info Don't forget to add unit tests and documentation in case your contribution adds a feature and is not just a bugfix. Moreover, writing an descriptive commit message is highly recommended. In case of doubt, you can check the commit history with: git log --graph --decorate --pretty=oneline --abbrev-commit --all to look for recurring communication patterns. Please check that your changes don't break any unit tests with hatch run test:cov or hatch run test:no-cov to run the unitest with or without coverage reports, respectively. Submit your contribution \u00b6 If everything works fine, push your local branch to the remote server with: git push -u origin my-feature Go to the web page of your fork and click \"Create pull request\" to send your changes for review. Find more detailed information in creating a PR . You might also want to open the PR as a draft first and mark it as ready for review after the feedbacks from the continuous integration (CI) system or any required fixes. Even though, these resources focus on open source projects and communities, the general ideas behind collaborating with other developers to collectively create software are general and can be applied to all sorts of environments, including private companies and proprietary code bases. \u21a9","title":"Contributing"},{"location":"contributing/#contributing","text":"Welcome to the contributor guide of Pytanis. This document focuses on getting any potential contributor familiarized with the development processes, but other kinds of contributions are also appreciated. If you are new to using git or have never collaborated in a project previously, please have a look at contribution-guide.org . Other resources are also listed in the excellent guide created by Freecodecamp 1 . Please notice, all users and contributors are expected to be open, considerate, reasonable, and respectful . When in doubt, Python Software Foundation's Code of Conduct is a good reference in terms of behavior guidelines.","title":"Contributing"},{"location":"contributing/#issue-reports","text":"If you experience bugs or general issues with Pytanis, please have a look on the issue tracker . If you don't see anything useful there, please feel free to fire an issue report. Tip Please don't forget to include the closed issues in your search. Sometimes a solution was already reported, and the problem is considered solved . New issue reports should include information about your programming environment (e.g., operating system, Python version) and steps to reproduce the problem. Please try also to simplify the reproduction steps to a very minimal example that still illustrates the problem you are facing. By removing other factors, you help us to identify the root cause of the issue.","title":"Issue Reports"},{"location":"contributing/#documentation-improvements","text":"You can help to the documentation of Pytanis by making them more readable and coherent, or by adding missing information and correcting mistakes. The documentation uses mkdocs as its main documentation compiler. This means that the docs are kept in the same repository as the project code, and that any documentation update is done in the same way was a code contribution. Tip Please notice that the GitHub web interface provides a quick way of propose changes in Pytanis 's files. While this mechanism can be tricky for normal code contributions, it works perfectly fine for contributing to the docs, and can be quite handy. If you are interested in trying this method out, please navigate to the docs folder in the source repository , find which file you would like to propose changes and click in the little pencil icon at the top, to open GitHub's code editor . Once you finish editing the file, please write a message in the form at the bottom of the page describing which changes have you made and what are the motivations behind them and submit your proposal. When working on documentation changes in your local machine, you can build and serve them using hatch with hatch run docs:build and hatch run docs:serve , respectively.","title":"Documentation improvements"},{"location":"contributing/#code-contributions","text":"","title":"Code Contributions"},{"location":"contributing/#submit-an-issue","text":"Before you work on any non-trivial code contribution it's best to first create a report in the issue tracker to start a discussion on the subject. This often provides additional considerations and avoids unnecessary work.","title":"Submit an issue"},{"location":"contributing/#clone-the-repository","text":"Create a user account on GitHub if you do not already have one. Fork the project repository : click on the Fork button near the top of the page. This creates a copy of the code under your account on GitHub. Clone this copy to your local disk: git clone git@github.com:YourLogin/pytanis.git cd pytanis Make sure hatch is installed using pipx : pipx install hatch [only once] install pre-commit hooks in the default environment with: hatch run pre-commit install","title":"Clone the repository"},{"location":"contributing/#implement-your-changes","text":"Create a branch to hold your changes: git checkout -b my-feature and start making changes. Never work on the main branch! Start your work on this branch. Don't forget to add docstrings in Google style to new functions, modules and classes, especially if they are part of public APIs. Add yourself to the list of contributors in AUTHORS.md . When you\u2019re done editing, do: git add <MODIFIED FILES> git commit to record your changes in git . Please make sure to see the validation messages from pre-commit and fix any eventual issues. This should automatically use flake8 / black to check/fix the code style in a way that is compatible with the project. Info Don't forget to add unit tests and documentation in case your contribution adds a feature and is not just a bugfix. Moreover, writing an descriptive commit message is highly recommended. In case of doubt, you can check the commit history with: git log --graph --decorate --pretty=oneline --abbrev-commit --all to look for recurring communication patterns. Please check that your changes don't break any unit tests with hatch run test:cov or hatch run test:no-cov to run the unitest with or without coverage reports, respectively.","title":"Implement your changes"},{"location":"contributing/#submit-your-contribution","text":"If everything works fine, push your local branch to the remote server with: git push -u origin my-feature Go to the web page of your fork and click \"Create pull request\" to send your changes for review. Find more detailed information in creating a PR . You might also want to open the PR as a draft first and mark it as ready for review after the feedbacks from the continuous integration (CI) system or any required fixes. Even though, these resources focus on open source projects and communities, the general ideas behind collaborating with other developers to collectively create software are general and can be applied to all sorts of environments, including private companies and proprietary code bases. \u21a9","title":"Submit your contribution"},{"location":"license/","text":"The MIT License (MIT) Copyright \u00a9 2022 Florian Wilhelm Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"reference/SUMMARY/","text":"pytanis config google helpdesk pretalx utils","title":"SUMMARY"},{"location":"reference/pytanis/","text":"pytanis \u00b6 __all__ = [ '__version__' , 'GoogleAPI' , 'PretalxAPI' ] module-attribute \u00b6 __version__ = version ( 'pytanis' ) module-attribute \u00b6 GoogleAPI ( config : Optional [ Config ] = None , scopes : List [ str ] = RO_SCOPE ) \u00b6 Source code in pytanis/google.py def __init__ ( self , config : Optional [ Config ] = None , scopes : List [ str ] = RO_SCOPE ): if config is None : config = get_cfg () self . config = config self . scopes = scopes config = config instance-attribute \u00b6 scopes = scopes instance-attribute \u00b6 gsheet ( spreadsheet_id : str , range : str , kwargs ) -> Dict [ str , Any ] \u00b6 Retrieve a google sheet Source code in pytanis/google.py def gsheet ( self , spreadsheet_id : str , range : str , ** kwargs ) -> Dict [ str , Any ]: \"\"\"Retrieve a google sheet\"\"\" creds = self . _get_creds () service = build ( 'sheets' , 'v4' , credentials = creds ) sheet = service . spreadsheets () # https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/get gsheet = sheet . values () . get ( spreadsheetId = spreadsheet_id , range = range , ** kwargs ) . execute () return gsheet gsheet_as_df ( spreadsheet_id : str , range : str , header : bool = True ) -> pd . DataFrame \u00b6 Source code in pytanis/google.py def gsheet_as_df ( self , spreadsheet_id : str , range : str , header : bool = True ) -> pd . DataFrame : gsheet = self . gsheet ( spreadsheet_id , range , majorDimension = \"COLUMNS\" ) return gsheet_to_df ( gsheet , header ) init_token ( recreate : bool = False ) \u00b6 Init the API token by creating it if not available Remember to recreate the token everytime you change the scopes. This function will open a browser window for authentication. Source code in pytanis/google.py def init_token ( self , recreate : bool = False ): \"\"\"Init the API token by creating it if not available Remember to recreate the token everytime you change the scopes. This function will open a browser window for authentication. \"\"\" token_path = self . config . Google . token_json if not recreate and token_path . exists (): return secret_path = self . config . Google . client_secret_json flow = InstalledAppFlow . from_client_secrets_file ( secret_path , self . scopes ) creds = flow . run_local_server ( port = 0 ) with open ( token_path , 'w' ) as fh : fh . write ( creds . to_json ()) PretalxAPI ( config : Optional [ Config ] = None ) \u00b6 Source code in pytanis/pretalx.py def __init__ ( self , config : Optional [ Config ] = None ): if config is None : config = get_cfg () self . config = config config = config instance-attribute \u00b6 answers ( event_slug : str , id : Optional [ int ] = None ) -> APIResponse \u00b6 Source code in pytanis/pretalx.py def answers ( self , event_slug : str , id : Optional [ int ] = None ) -> APIResponse : return self . _endpoint ( event_slug , \"answers\" , id ) events ( event_slug : Optional [ str ] = None ) -> APIResponse \u00b6 Source code in pytanis/pretalx.py def events ( self , event_slug : Optional [ str ] = None ) -> APIResponse : return self . _endpoint ( event_slug ) questions ( event_slug : str , id : Optional [ int ] = None ) -> APIResponse \u00b6 Source code in pytanis/pretalx.py def questions ( self , event_slug : str , id : Optional [ int ] = None ) -> APIResponse : return self . _endpoint ( event_slug , \"questions\" , id ) reviews ( event_slug : str , id : Optional [ int ] = None ) -> APIResponse \u00b6 Source code in pytanis/pretalx.py def reviews ( self , event_slug : str , id : Optional [ int ] = None ) -> APIResponse : return self . _endpoint ( event_slug , \"reviews\" , id ) rooms ( event_slug : str , id : Optional [ int ] = None ) -> APIResponse \u00b6 Source code in pytanis/pretalx.py def rooms ( self , event_slug : str , id : Optional [ int ] = None ) -> APIResponse : return self . _endpoint ( event_slug , \"rooms\" , id ) speakers ( event_slug : str , code : Optional [ str ] = None ) -> APIResponse \u00b6 Source code in pytanis/pretalx.py def speakers ( self , event_slug : str , code : Optional [ str ] = None ) -> APIResponse : return self . _endpoint ( event_slug , \"speakers\" , code ) submissions ( event_slug : str , code : Optional [ str ] = None ) -> APIResponse \u00b6 Source code in pytanis/pretalx.py def submissions ( self , event_slug : str , code : Optional [ str ] = None ) -> APIResponse : return self . _endpoint ( event_slug , \"submissions\" , code ) tags ( event_slug : str , tag : Optional [ str ] = None ) -> APIResponse \u00b6 Source code in pytanis/pretalx.py def tags ( self , event_slug : str , tag : Optional [ str ] = None ) -> APIResponse : return self . _endpoint ( event_slug , \"tags\" , tag ) talks ( event_slug : str , code : Optional [ str ] = None ) -> APIResponse \u00b6 Source code in pytanis/pretalx.py def talks ( self , event_slug : str , code : Optional [ str ] = None ) -> APIResponse : return self . _endpoint ( event_slug , \"talks\" , code )","title":"pytanis"},{"location":"reference/pytanis/#pytanis","text":"","title":"pytanis"},{"location":"reference/pytanis/#pytanis.__all__","text":"","title":"__all__"},{"location":"reference/pytanis/#pytanis.__version__","text":"","title":"__version__"},{"location":"reference/pytanis/#pytanis.GoogleAPI","text":"Source code in pytanis/google.py def __init__ ( self , config : Optional [ Config ] = None , scopes : List [ str ] = RO_SCOPE ): if config is None : config = get_cfg () self . config = config self . scopes = scopes","title":"GoogleAPI"},{"location":"reference/pytanis/#pytanis.google.GoogleAPI.config","text":"","title":"config"},{"location":"reference/pytanis/#pytanis.google.GoogleAPI.scopes","text":"","title":"scopes"},{"location":"reference/pytanis/#pytanis.google.GoogleAPI.gsheet","text":"Retrieve a google sheet Source code in pytanis/google.py def gsheet ( self , spreadsheet_id : str , range : str , ** kwargs ) -> Dict [ str , Any ]: \"\"\"Retrieve a google sheet\"\"\" creds = self . _get_creds () service = build ( 'sheets' , 'v4' , credentials = creds ) sheet = service . spreadsheets () # https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/get gsheet = sheet . values () . get ( spreadsheetId = spreadsheet_id , range = range , ** kwargs ) . execute () return gsheet","title":"gsheet()"},{"location":"reference/pytanis/#pytanis.google.GoogleAPI.gsheet_as_df","text":"Source code in pytanis/google.py def gsheet_as_df ( self , spreadsheet_id : str , range : str , header : bool = True ) -> pd . DataFrame : gsheet = self . gsheet ( spreadsheet_id , range , majorDimension = \"COLUMNS\" ) return gsheet_to_df ( gsheet , header )","title":"gsheet_as_df()"},{"location":"reference/pytanis/#pytanis.google.GoogleAPI.init_token","text":"Init the API token by creating it if not available Remember to recreate the token everytime you change the scopes. This function will open a browser window for authentication. Source code in pytanis/google.py def init_token ( self , recreate : bool = False ): \"\"\"Init the API token by creating it if not available Remember to recreate the token everytime you change the scopes. This function will open a browser window for authentication. \"\"\" token_path = self . config . Google . token_json if not recreate and token_path . exists (): return secret_path = self . config . Google . client_secret_json flow = InstalledAppFlow . from_client_secrets_file ( secret_path , self . scopes ) creds = flow . run_local_server ( port = 0 ) with open ( token_path , 'w' ) as fh : fh . write ( creds . to_json ())","title":"init_token()"},{"location":"reference/pytanis/#pytanis.PretalxAPI","text":"Source code in pytanis/pretalx.py def __init__ ( self , config : Optional [ Config ] = None ): if config is None : config = get_cfg () self . config = config","title":"PretalxAPI"},{"location":"reference/pytanis/#pytanis.pretalx.PretalxAPI.config","text":"","title":"config"},{"location":"reference/pytanis/#pytanis.pretalx.PretalxAPI.answers","text":"Source code in pytanis/pretalx.py def answers ( self , event_slug : str , id : Optional [ int ] = None ) -> APIResponse : return self . _endpoint ( event_slug , \"answers\" , id )","title":"answers()"},{"location":"reference/pytanis/#pytanis.pretalx.PretalxAPI.events","text":"Source code in pytanis/pretalx.py def events ( self , event_slug : Optional [ str ] = None ) -> APIResponse : return self . _endpoint ( event_slug )","title":"events()"},{"location":"reference/pytanis/#pytanis.pretalx.PretalxAPI.questions","text":"Source code in pytanis/pretalx.py def questions ( self , event_slug : str , id : Optional [ int ] = None ) -> APIResponse : return self . _endpoint ( event_slug , \"questions\" , id )","title":"questions()"},{"location":"reference/pytanis/#pytanis.pretalx.PretalxAPI.reviews","text":"Source code in pytanis/pretalx.py def reviews ( self , event_slug : str , id : Optional [ int ] = None ) -> APIResponse : return self . _endpoint ( event_slug , \"reviews\" , id )","title":"reviews()"},{"location":"reference/pytanis/#pytanis.pretalx.PretalxAPI.rooms","text":"Source code in pytanis/pretalx.py def rooms ( self , event_slug : str , id : Optional [ int ] = None ) -> APIResponse : return self . _endpoint ( event_slug , \"rooms\" , id )","title":"rooms()"},{"location":"reference/pytanis/#pytanis.pretalx.PretalxAPI.speakers","text":"Source code in pytanis/pretalx.py def speakers ( self , event_slug : str , code : Optional [ str ] = None ) -> APIResponse : return self . _endpoint ( event_slug , \"speakers\" , code )","title":"speakers()"},{"location":"reference/pytanis/#pytanis.pretalx.PretalxAPI.submissions","text":"Source code in pytanis/pretalx.py def submissions ( self , event_slug : str , code : Optional [ str ] = None ) -> APIResponse : return self . _endpoint ( event_slug , \"submissions\" , code )","title":"submissions()"},{"location":"reference/pytanis/#pytanis.pretalx.PretalxAPI.tags","text":"Source code in pytanis/pretalx.py def tags ( self , event_slug : str , tag : Optional [ str ] = None ) -> APIResponse : return self . _endpoint ( event_slug , \"tags\" , tag )","title":"tags()"},{"location":"reference/pytanis/#pytanis.pretalx.PretalxAPI.talks","text":"Source code in pytanis/pretalx.py def talks ( self , event_slug : str , code : Optional [ str ] = None ) -> APIResponse : return self . _endpoint ( event_slug , \"talks\" , code )","title":"talks()"},{"location":"reference/pytanis/config/","text":"config \u00b6 Handling the configuration PYTANIS_CFG_PATH : str = '.pytanis/config.toml' module-attribute \u00b6 Path within $HOME to the configuration file of Pytanis PYTANIS_ENV : str = 'PYTANIS_CONFIG' module-attribute \u00b6 Name of the environment variable to look up the path for the config Config \u00b6 Main configuration object Google : Google class-attribute \u00b6 HelpDesk : HelpDesk class-attribute \u00b6 Pretalx : Pretalx class-attribute \u00b6 cfg_path : FilePath class-attribute \u00b6 convert_json_path ( v , values ) classmethod \u00b6 Source code in pytanis/config.py @validator ( \"Google\" ) @classmethod def convert_json_path ( cls , v , values ): def make_rel_path_abs ( entry ): if entry is not None and not entry . is_absolute (): entry = values [ \"cfg_path\" ] . parent / entry return entry v . client_secret_json = make_rel_path_abs ( v . client_secret_json ) v . token_json = make_rel_path_abs ( v . token_json ) return v Google \u00b6 Configuration related to the Google API client_secret_json : Optional [ Path ] = None class-attribute \u00b6 token_json : Optional [ Path ] = None class-attribute \u00b6 HelpDesk \u00b6 Configuration related to the HelpDesk API account : Optional [ str ] = None class-attribute \u00b6 entity_id : Optional [ str ] = None class-attribute \u00b6 token : Optional [ str ] = None class-attribute \u00b6 Pretalx \u00b6 Configuration related to the Pretalx API api_token : Optional [ str ] = None class-attribute \u00b6 get_cfg () -> Config \u00b6 Returns the configuration as an object Source code in pytanis/config.py def get_cfg () -> Config : \"\"\"Returns the configuration as an object\"\"\" cfg_path = get_cfg_file () with open ( cfg_path , \"rb\" ) as fh : cfg_dict = tomli . load ( fh ) # add config path to later resolve relative paths of config values cfg_dict [ \"cfg_path\" ] = cfg_path return Config . parse_obj ( cfg_dict ) get_cfg_file () -> Path \u00b6 Determines the path of the config file Source code in pytanis/config.py def get_cfg_file () -> Path : \"\"\"Determines the path of the config file\"\"\" path = os . environ . get ( PYTANIS_ENV , None ) if path is None : path = Path . home () / Path ( PYTANIS_CFG_PATH ) else : path = Path ( path ) return path","title":"config"},{"location":"reference/pytanis/config/#pytanis.config","text":"Handling the configuration","title":"config"},{"location":"reference/pytanis/config/#pytanis.config.PYTANIS_CFG_PATH","text":"Path within $HOME to the configuration file of Pytanis","title":"PYTANIS_CFG_PATH"},{"location":"reference/pytanis/config/#pytanis.config.PYTANIS_ENV","text":"Name of the environment variable to look up the path for the config","title":"PYTANIS_ENV"},{"location":"reference/pytanis/config/#pytanis.config.Config","text":"Main configuration object","title":"Config"},{"location":"reference/pytanis/config/#pytanis.config.Config.Google","text":"","title":"Google"},{"location":"reference/pytanis/config/#pytanis.config.Config.HelpDesk","text":"","title":"HelpDesk"},{"location":"reference/pytanis/config/#pytanis.config.Config.Pretalx","text":"","title":"Pretalx"},{"location":"reference/pytanis/config/#pytanis.config.Config.cfg_path","text":"","title":"cfg_path"},{"location":"reference/pytanis/config/#pytanis.config.Config.convert_json_path","text":"Source code in pytanis/config.py @validator ( \"Google\" ) @classmethod def convert_json_path ( cls , v , values ): def make_rel_path_abs ( entry ): if entry is not None and not entry . is_absolute (): entry = values [ \"cfg_path\" ] . parent / entry return entry v . client_secret_json = make_rel_path_abs ( v . client_secret_json ) v . token_json = make_rel_path_abs ( v . token_json ) return v","title":"convert_json_path()"},{"location":"reference/pytanis/config/#pytanis.config.Google","text":"Configuration related to the Google API","title":"Google"},{"location":"reference/pytanis/config/#pytanis.config.Google.client_secret_json","text":"","title":"client_secret_json"},{"location":"reference/pytanis/config/#pytanis.config.Google.token_json","text":"","title":"token_json"},{"location":"reference/pytanis/config/#pytanis.config.HelpDesk","text":"Configuration related to the HelpDesk API","title":"HelpDesk"},{"location":"reference/pytanis/config/#pytanis.config.HelpDesk.account","text":"","title":"account"},{"location":"reference/pytanis/config/#pytanis.config.HelpDesk.entity_id","text":"","title":"entity_id"},{"location":"reference/pytanis/config/#pytanis.config.HelpDesk.token","text":"","title":"token"},{"location":"reference/pytanis/config/#pytanis.config.Pretalx","text":"Configuration related to the Pretalx API","title":"Pretalx"},{"location":"reference/pytanis/config/#pytanis.config.Pretalx.api_token","text":"","title":"api_token"},{"location":"reference/pytanis/config/#pytanis.config.get_cfg","text":"Returns the configuration as an object Source code in pytanis/config.py def get_cfg () -> Config : \"\"\"Returns the configuration as an object\"\"\" cfg_path = get_cfg_file () with open ( cfg_path , \"rb\" ) as fh : cfg_dict = tomli . load ( fh ) # add config path to later resolve relative paths of config values cfg_dict [ \"cfg_path\" ] = cfg_path return Config . parse_obj ( cfg_dict )","title":"get_cfg()"},{"location":"reference/pytanis/config/#pytanis.config.get_cfg_file","text":"Determines the path of the config file Source code in pytanis/config.py def get_cfg_file () -> Path : \"\"\"Determines the path of the config file\"\"\" path = os . environ . get ( PYTANIS_ENV , None ) if path is None : path = Path . home () / Path ( PYTANIS_CFG_PATH ) else : path = Path ( path ) return path","title":"get_cfg_file()"},{"location":"reference/pytanis/google/","text":"google \u00b6 Functionality around the Google API Documentation: https://developers.google.com/sheets/api/quickstart/python RO_SCOPE = [ 'https://www.googleapis.com/auth/spreadsheets.readonly' ] module-attribute \u00b6 GoogleAPI ( config : Optional [ Config ] = None , scopes : List [ str ] = RO_SCOPE ) \u00b6 Source code in pytanis/google.py def __init__ ( self , config : Optional [ Config ] = None , scopes : List [ str ] = RO_SCOPE ): if config is None : config = get_cfg () self . config = config self . scopes = scopes config = config instance-attribute \u00b6 scopes = scopes instance-attribute \u00b6 gsheet ( spreadsheet_id : str , range : str , kwargs ) -> Dict [ str , Any ] \u00b6 Retrieve a google sheet Source code in pytanis/google.py def gsheet ( self , spreadsheet_id : str , range : str , ** kwargs ) -> Dict [ str , Any ]: \"\"\"Retrieve a google sheet\"\"\" creds = self . _get_creds () service = build ( 'sheets' , 'v4' , credentials = creds ) sheet = service . spreadsheets () # https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/get gsheet = sheet . values () . get ( spreadsheetId = spreadsheet_id , range = range , ** kwargs ) . execute () return gsheet gsheet_as_df ( spreadsheet_id : str , range : str , header : bool = True ) -> pd . DataFrame \u00b6 Source code in pytanis/google.py def gsheet_as_df ( self , spreadsheet_id : str , range : str , header : bool = True ) -> pd . DataFrame : gsheet = self . gsheet ( spreadsheet_id , range , majorDimension = \"COLUMNS\" ) return gsheet_to_df ( gsheet , header ) init_token ( recreate : bool = False ) \u00b6 Init the API token by creating it if not available Remember to recreate the token everytime you change the scopes. This function will open a browser window for authentication. Source code in pytanis/google.py def init_token ( self , recreate : bool = False ): \"\"\"Init the API token by creating it if not available Remember to recreate the token everytime you change the scopes. This function will open a browser window for authentication. \"\"\" token_path = self . config . Google . token_json if not recreate and token_path . exists (): return secret_path = self . config . Google . client_secret_json flow = InstalledAppFlow . from_client_secrets_file ( secret_path , self . scopes ) creds = flow . run_local_server ( port = 0 ) with open ( token_path , 'w' ) as fh : fh . write ( creds . to_json ()) gsheet_to_df ( gsheet : Dict [ str , Any ], header : bool = True ) -> pd . DataFrame \u00b6 Transform a Google Sheet into a Pandas DataFrame Requires a gsheet with columns as major dimension Source code in pytanis/google.py def gsheet_to_df ( gsheet : Dict [ str , Any ], header : bool = True ) -> pd . DataFrame : \"\"\"Transform a Google Sheet into a Pandas DataFrame Requires a gsheet with columns as major dimension \"\"\" values = gsheet . get ( 'values' , []) if not values : return pd . DataFrame () if header : columns = [ col . pop ( 0 ) for col in values ] else : columns = list ( range ( len ( values ))) padded_values = zip ( * itertools . zip_longest ( * values , fillvalue = '' )) data = { col : val for col , val in zip ( columns , padded_values )} return pd . DataFrame ( data )","title":"google"},{"location":"reference/pytanis/google/#pytanis.google","text":"Functionality around the Google API Documentation: https://developers.google.com/sheets/api/quickstart/python","title":"google"},{"location":"reference/pytanis/google/#pytanis.google.RO_SCOPE","text":"","title":"RO_SCOPE"},{"location":"reference/pytanis/google/#pytanis.google.GoogleAPI","text":"Source code in pytanis/google.py def __init__ ( self , config : Optional [ Config ] = None , scopes : List [ str ] = RO_SCOPE ): if config is None : config = get_cfg () self . config = config self . scopes = scopes","title":"GoogleAPI"},{"location":"reference/pytanis/google/#pytanis.google.GoogleAPI.config","text":"","title":"config"},{"location":"reference/pytanis/google/#pytanis.google.GoogleAPI.scopes","text":"","title":"scopes"},{"location":"reference/pytanis/google/#pytanis.google.GoogleAPI.gsheet","text":"Retrieve a google sheet Source code in pytanis/google.py def gsheet ( self , spreadsheet_id : str , range : str , ** kwargs ) -> Dict [ str , Any ]: \"\"\"Retrieve a google sheet\"\"\" creds = self . _get_creds () service = build ( 'sheets' , 'v4' , credentials = creds ) sheet = service . spreadsheets () # https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/get gsheet = sheet . values () . get ( spreadsheetId = spreadsheet_id , range = range , ** kwargs ) . execute () return gsheet","title":"gsheet()"},{"location":"reference/pytanis/google/#pytanis.google.GoogleAPI.gsheet_as_df","text":"Source code in pytanis/google.py def gsheet_as_df ( self , spreadsheet_id : str , range : str , header : bool = True ) -> pd . DataFrame : gsheet = self . gsheet ( spreadsheet_id , range , majorDimension = \"COLUMNS\" ) return gsheet_to_df ( gsheet , header )","title":"gsheet_as_df()"},{"location":"reference/pytanis/google/#pytanis.google.GoogleAPI.init_token","text":"Init the API token by creating it if not available Remember to recreate the token everytime you change the scopes. This function will open a browser window for authentication. Source code in pytanis/google.py def init_token ( self , recreate : bool = False ): \"\"\"Init the API token by creating it if not available Remember to recreate the token everytime you change the scopes. This function will open a browser window for authentication. \"\"\" token_path = self . config . Google . token_json if not recreate and token_path . exists (): return secret_path = self . config . Google . client_secret_json flow = InstalledAppFlow . from_client_secrets_file ( secret_path , self . scopes ) creds = flow . run_local_server ( port = 0 ) with open ( token_path , 'w' ) as fh : fh . write ( creds . to_json ())","title":"init_token()"},{"location":"reference/pytanis/google/#pytanis.google.gsheet_to_df","text":"Transform a Google Sheet into a Pandas DataFrame Requires a gsheet with columns as major dimension Source code in pytanis/google.py def gsheet_to_df ( gsheet : Dict [ str , Any ], header : bool = True ) -> pd . DataFrame : \"\"\"Transform a Google Sheet into a Pandas DataFrame Requires a gsheet with columns as major dimension \"\"\" values = gsheet . get ( 'values' , []) if not values : return pd . DataFrame () if header : columns = [ col . pop ( 0 ) for col in values ] else : columns = list ( range ( len ( values ))) padded_values = zip ( * itertools . zip_longest ( * values , fillvalue = '' )) data = { col : val for col , val in zip ( columns , padded_values )} return pd . DataFrame ( data )","title":"gsheet_to_df()"},{"location":"reference/pytanis/helpdesk/","text":"helpdesk \u00b6 Functionality around the HelpDesk / LiveChat API","title":"helpdesk"},{"location":"reference/pytanis/helpdesk/#pytanis.helpdesk","text":"Functionality around the HelpDesk / LiveChat API","title":"helpdesk"},{"location":"reference/pytanis/pretalx/","text":"pretalx \u00b6 Functionality around Pretalx API Documentation: https://docs.pretalx.org/api/ APIResponse = Union [ Dict [ str , Any ], Tuple [ int , Iterator [ Dict [ str , Any ]]]] module-attribute \u00b6 JSON object or a tuple of a count and an iterator of JSON objects logger = get_logger () module-attribute \u00b6 PretalxAPI ( config : Optional [ Config ] = None ) \u00b6 Source code in pytanis/pretalx.py def __init__ ( self , config : Optional [ Config ] = None ): if config is None : config = get_cfg () self . config = config config = config instance-attribute \u00b6 answers ( event_slug : str , id : Optional [ int ] = None ) -> APIResponse \u00b6 Source code in pytanis/pretalx.py def answers ( self , event_slug : str , id : Optional [ int ] = None ) -> APIResponse : return self . _endpoint ( event_slug , \"answers\" , id ) events ( event_slug : Optional [ str ] = None ) -> APIResponse \u00b6 Source code in pytanis/pretalx.py def events ( self , event_slug : Optional [ str ] = None ) -> APIResponse : return self . _endpoint ( event_slug ) questions ( event_slug : str , id : Optional [ int ] = None ) -> APIResponse \u00b6 Source code in pytanis/pretalx.py def questions ( self , event_slug : str , id : Optional [ int ] = None ) -> APIResponse : return self . _endpoint ( event_slug , \"questions\" , id ) reviews ( event_slug : str , id : Optional [ int ] = None ) -> APIResponse \u00b6 Source code in pytanis/pretalx.py def reviews ( self , event_slug : str , id : Optional [ int ] = None ) -> APIResponse : return self . _endpoint ( event_slug , \"reviews\" , id ) rooms ( event_slug : str , id : Optional [ int ] = None ) -> APIResponse \u00b6 Source code in pytanis/pretalx.py def rooms ( self , event_slug : str , id : Optional [ int ] = None ) -> APIResponse : return self . _endpoint ( event_slug , \"rooms\" , id ) speakers ( event_slug : str , code : Optional [ str ] = None ) -> APIResponse \u00b6 Source code in pytanis/pretalx.py def speakers ( self , event_slug : str , code : Optional [ str ] = None ) -> APIResponse : return self . _endpoint ( event_slug , \"speakers\" , code ) submissions ( event_slug : str , code : Optional [ str ] = None ) -> APIResponse \u00b6 Source code in pytanis/pretalx.py def submissions ( self , event_slug : str , code : Optional [ str ] = None ) -> APIResponse : return self . _endpoint ( event_slug , \"submissions\" , code ) tags ( event_slug : str , tag : Optional [ str ] = None ) -> APIResponse \u00b6 Source code in pytanis/pretalx.py def tags ( self , event_slug : str , tag : Optional [ str ] = None ) -> APIResponse : return self . _endpoint ( event_slug , \"tags\" , tag ) talks ( event_slug : str , code : Optional [ str ] = None ) -> APIResponse \u00b6 Source code in pytanis/pretalx.py def talks ( self , event_slug : str , code : Optional [ str ] = None ) -> APIResponse : return self . _endpoint ( event_slug , \"talks\" , code )","title":"pretalx"},{"location":"reference/pytanis/pretalx/#pytanis.pretalx","text":"Functionality around Pretalx API Documentation: https://docs.pretalx.org/api/","title":"pretalx"},{"location":"reference/pytanis/pretalx/#pytanis.pretalx.APIResponse","text":"JSON object or a tuple of a count and an iterator of JSON objects","title":"APIResponse"},{"location":"reference/pytanis/pretalx/#pytanis.pretalx.logger","text":"","title":"logger"},{"location":"reference/pytanis/pretalx/#pytanis.pretalx.PretalxAPI","text":"Source code in pytanis/pretalx.py def __init__ ( self , config : Optional [ Config ] = None ): if config is None : config = get_cfg () self . config = config","title":"PretalxAPI"},{"location":"reference/pytanis/pretalx/#pytanis.pretalx.PretalxAPI.config","text":"","title":"config"},{"location":"reference/pytanis/pretalx/#pytanis.pretalx.PretalxAPI.answers","text":"Source code in pytanis/pretalx.py def answers ( self , event_slug : str , id : Optional [ int ] = None ) -> APIResponse : return self . _endpoint ( event_slug , \"answers\" , id )","title":"answers()"},{"location":"reference/pytanis/pretalx/#pytanis.pretalx.PretalxAPI.events","text":"Source code in pytanis/pretalx.py def events ( self , event_slug : Optional [ str ] = None ) -> APIResponse : return self . _endpoint ( event_slug )","title":"events()"},{"location":"reference/pytanis/pretalx/#pytanis.pretalx.PretalxAPI.questions","text":"Source code in pytanis/pretalx.py def questions ( self , event_slug : str , id : Optional [ int ] = None ) -> APIResponse : return self . _endpoint ( event_slug , \"questions\" , id )","title":"questions()"},{"location":"reference/pytanis/pretalx/#pytanis.pretalx.PretalxAPI.reviews","text":"Source code in pytanis/pretalx.py def reviews ( self , event_slug : str , id : Optional [ int ] = None ) -> APIResponse : return self . _endpoint ( event_slug , \"reviews\" , id )","title":"reviews()"},{"location":"reference/pytanis/pretalx/#pytanis.pretalx.PretalxAPI.rooms","text":"Source code in pytanis/pretalx.py def rooms ( self , event_slug : str , id : Optional [ int ] = None ) -> APIResponse : return self . _endpoint ( event_slug , \"rooms\" , id )","title":"rooms()"},{"location":"reference/pytanis/pretalx/#pytanis.pretalx.PretalxAPI.speakers","text":"Source code in pytanis/pretalx.py def speakers ( self , event_slug : str , code : Optional [ str ] = None ) -> APIResponse : return self . _endpoint ( event_slug , \"speakers\" , code )","title":"speakers()"},{"location":"reference/pytanis/pretalx/#pytanis.pretalx.PretalxAPI.submissions","text":"Source code in pytanis/pretalx.py def submissions ( self , event_slug : str , code : Optional [ str ] = None ) -> APIResponse : return self . _endpoint ( event_slug , \"submissions\" , code )","title":"submissions()"},{"location":"reference/pytanis/pretalx/#pytanis.pretalx.PretalxAPI.tags","text":"Source code in pytanis/pretalx.py def tags ( self , event_slug : str , tag : Optional [ str ] = None ) -> APIResponse : return self . _endpoint ( event_slug , \"tags\" , tag )","title":"tags()"},{"location":"reference/pytanis/pretalx/#pytanis.pretalx.PretalxAPI.talks","text":"Source code in pytanis/pretalx.py def talks ( self , event_slug : str , code : Optional [ str ] = None ) -> APIResponse : return self . _endpoint ( event_slug , \"talks\" , code )","title":"talks()"},{"location":"reference/pytanis/utils/","text":"utils \u00b6 Additional utilities rm_keys ( keys : Union [ Any , List [ Any ]], dct : Dict [ Any , Any ]) -> Dict [ Any , Any ] \u00b6 Return a copy with keys removed from dictionary Source code in pytanis/utils.py def rm_keys ( keys : Union [ Any , List [ Any ]], dct : Dict [ Any , Any ], ) -> Dict [ Any , Any ]: \"\"\"Return a copy with keys removed from dictionary\"\"\" if not isinstance ( keys , list ): keys = [ keys ] return { k : v for k , v in dct . items () if k not in keys }","title":"utils"},{"location":"reference/pytanis/utils/#pytanis.utils","text":"Additional utilities","title":"utils"},{"location":"reference/pytanis/utils/#pytanis.utils.rm_keys","text":"Return a copy with keys removed from dictionary Source code in pytanis/utils.py def rm_keys ( keys : Union [ Any , List [ Any ]], dct : Dict [ Any , Any ], ) -> Dict [ Any , Any ]: \"\"\"Return a copy with keys removed from dictionary\"\"\" if not isinstance ( keys , list ): keys = [ keys ] return { k : v for k , v in dct . items () if k not in keys }","title":"rm_keys()"}]}