{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pytanis \u00b6 Utilities for the program organization of conferences using Pretalx! This is a pre-alpha version! Don't use it! Features \u00b6 in development ... License \u00b6 Pytanis is distributed under the terms of the MIT license. Navigation \u00b6 Documentation for specific MAJOR.MINOR versions can be chosen by using the dropdown on the top of every page. The dev version reflects changes that have not yet been released. Also, desktop readers can use special keyboard shortcuts: Keys Action , (comma) p Navigate to the \"previous\" page . (period) n Navigate to the \"next\" page / s Display the search modal","title":"About"},{"location":"#pytanis","text":"Utilities for the program organization of conferences using Pretalx! This is a pre-alpha version! Don't use it!","title":"Pytanis"},{"location":"#features","text":"in development ...","title":"Features"},{"location":"#license","text":"Pytanis is distributed under the terms of the MIT license.","title":"License"},{"location":"#navigation","text":"Documentation for specific MAJOR.MINOR versions can be chosen by using the dropdown on the top of every page. The dev version reflects changes that have not yet been released. Also, desktop readers can use special keyboard shortcuts: Keys Action , (comma) p Navigate to the \"previous\" page . (period) n Navigate to the \"next\" page / s Display the search modal","title":"Navigation"},{"location":"authors/","text":"Contributors \u00b6 Florian Wilhelm Florian.Wilhelm@gmail.com","title":"Authors"},{"location":"authors/#contributors","text":"Florian Wilhelm Florian.Wilhelm@gmail.com","title":"Contributors"},{"location":"changelog/","text":"Changelog \u00b6 Version 0.0.1 (development) \u00b6 First pre-alpha to have a starting base","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#version-001-development","text":"First pre-alpha to have a starting base","title":"Version 0.0.1 (development)"},{"location":"contributing/","text":"Contributing \u00b6 Welcome to the contributor guide of Pytanis. This document focuses on getting any potential contributor familiarized with the development processes, but other kinds of contributions are also appreciated. If you are new to using git or have never collaborated in a project previously, please have a look at contribution-guide.org . Other resources are also listed in the excellent guide created by Freecodecamp 1 . Please notice, all users and contributors are expected to be open, considerate, reasonable, and respectful . When in doubt, Python Software Foundation's Code of Conduct is a good reference in terms of behavior guidelines. Issue Reports \u00b6 If you experience bugs or general issues with Pytanis, please have a look on the issue tracker . If you don't see anything useful there, please feel free to fire an issue report. Tip Please don't forget to include the closed issues in your search. Sometimes a solution was already reported, and the problem is considered solved . New issue reports should include information about your programming environment (e.g., operating system, Python version) and steps to reproduce the problem. Please try also to simplify the reproduction steps to a very minimal example that still illustrates the problem you are facing. By removing other factors, you help us to identify the root cause of the issue. Documentation improvements \u00b6 You can help to the documentation of Pytanis by making them more readable and coherent, or by adding missing information and correcting mistakes. The documentation uses mkdocs as its main documentation compiler. This means that the docs are kept in the same repository as the project code, and that any documentation update is done in the same way was a code contribution. Tip Please notice that the GitHub web interface provides a quick way of propose changes in Pytanis 's files. While this mechanism can be tricky for normal code contributions, it works perfectly fine for contributing to the docs, and can be quite handy. If you are interested in trying this method out, please navigate to the docs folder in the source repository , find which file you would like to propose changes and click in the little pencil icon at the top, to open GitHub's code editor . Once you finish editing the file, please write a message in the form at the bottom of the page describing which changes have you made and what are the motivations behind them and submit your proposal. When working on documentation changes in your local machine, you can build and serve them using hatch with hatch run docs:build and hatch run docs:serve , respectively. Code Contributions \u00b6 Submit an issue \u00b6 Before you work on any non-trivial code contribution it's best to first create a report in the issue tracker to start a discussion on the subject. This often provides additional considerations and avoids unnecessary work. Clone the repository \u00b6 Create a user account on GitHub if you do not already have one. Fork the project repository : click on the Fork button near the top of the page. This creates a copy of the code under your account on GitHub. Clone this copy to your local disk: git clone git@github.com:YourLogin/pytanis.git cd pytanis Make sure hatch is installed using pipx : pipx install hatch [only once] install pre-commit hooks in the default environment with: hatch run pre-commit install Implement your changes \u00b6 Create a branch to hold your changes: git checkout -b my-feature and start making changes. Never work on the main branch! Start your work on this branch. Don't forget to add docstrings in Google style to new functions, modules and classes, especially if they are part of public APIs. Add yourself to the list of contributors in AUTHORS.md . When you\u2019re done editing, do: git add <MODIFIED FILES> git commit to record your changes in git . Please make sure to see the validation messages from pre-commit and fix any eventual issues. This should automatically use flake8 / black to check/fix the code style in a way that is compatible with the project. Info Don't forget to add unit tests and documentation in case your contribution adds a feature and is not just a bugfix. Moreover, writing an descriptive commit message is highly recommended. In case of doubt, you can check the commit history with: git log --graph --decorate --pretty=oneline --abbrev-commit --all to look for recurring communication patterns. Please check that your changes don't break any unit tests with hatch run test:cov or hatch run test:no-cov to run the unitest with or without coverage reports, respectively. Submit your contribution \u00b6 If everything works fine, push your local branch to the remote server with: git push -u origin my-feature Go to the web page of your fork and click \"Create pull request\" to send your changes for review. Find more detailed information in creating a PR . You might also want to open the PR as a draft first and mark it as ready for review after the feedbacks from the continuous integration (CI) system or any required fixes. Even though, these resources focus on open source projects and communities, the general ideas behind collaborating with other developers to collectively create software are general and can be applied to all sorts of environments, including private companies and proprietary code bases. \u21a9","title":"Contributing"},{"location":"contributing/#contributing","text":"Welcome to the contributor guide of Pytanis. This document focuses on getting any potential contributor familiarized with the development processes, but other kinds of contributions are also appreciated. If you are new to using git or have never collaborated in a project previously, please have a look at contribution-guide.org . Other resources are also listed in the excellent guide created by Freecodecamp 1 . Please notice, all users and contributors are expected to be open, considerate, reasonable, and respectful . When in doubt, Python Software Foundation's Code of Conduct is a good reference in terms of behavior guidelines.","title":"Contributing"},{"location":"contributing/#issue-reports","text":"If you experience bugs or general issues with Pytanis, please have a look on the issue tracker . If you don't see anything useful there, please feel free to fire an issue report. Tip Please don't forget to include the closed issues in your search. Sometimes a solution was already reported, and the problem is considered solved . New issue reports should include information about your programming environment (e.g., operating system, Python version) and steps to reproduce the problem. Please try also to simplify the reproduction steps to a very minimal example that still illustrates the problem you are facing. By removing other factors, you help us to identify the root cause of the issue.","title":"Issue Reports"},{"location":"contributing/#documentation-improvements","text":"You can help to the documentation of Pytanis by making them more readable and coherent, or by adding missing information and correcting mistakes. The documentation uses mkdocs as its main documentation compiler. This means that the docs are kept in the same repository as the project code, and that any documentation update is done in the same way was a code contribution. Tip Please notice that the GitHub web interface provides a quick way of propose changes in Pytanis 's files. While this mechanism can be tricky for normal code contributions, it works perfectly fine for contributing to the docs, and can be quite handy. If you are interested in trying this method out, please navigate to the docs folder in the source repository , find which file you would like to propose changes and click in the little pencil icon at the top, to open GitHub's code editor . Once you finish editing the file, please write a message in the form at the bottom of the page describing which changes have you made and what are the motivations behind them and submit your proposal. When working on documentation changes in your local machine, you can build and serve them using hatch with hatch run docs:build and hatch run docs:serve , respectively.","title":"Documentation improvements"},{"location":"contributing/#code-contributions","text":"","title":"Code Contributions"},{"location":"contributing/#submit-an-issue","text":"Before you work on any non-trivial code contribution it's best to first create a report in the issue tracker to start a discussion on the subject. This often provides additional considerations and avoids unnecessary work.","title":"Submit an issue"},{"location":"contributing/#clone-the-repository","text":"Create a user account on GitHub if you do not already have one. Fork the project repository : click on the Fork button near the top of the page. This creates a copy of the code under your account on GitHub. Clone this copy to your local disk: git clone git@github.com:YourLogin/pytanis.git cd pytanis Make sure hatch is installed using pipx : pipx install hatch [only once] install pre-commit hooks in the default environment with: hatch run pre-commit install","title":"Clone the repository"},{"location":"contributing/#implement-your-changes","text":"Create a branch to hold your changes: git checkout -b my-feature and start making changes. Never work on the main branch! Start your work on this branch. Don't forget to add docstrings in Google style to new functions, modules and classes, especially if they are part of public APIs. Add yourself to the list of contributors in AUTHORS.md . When you\u2019re done editing, do: git add <MODIFIED FILES> git commit to record your changes in git . Please make sure to see the validation messages from pre-commit and fix any eventual issues. This should automatically use flake8 / black to check/fix the code style in a way that is compatible with the project. Info Don't forget to add unit tests and documentation in case your contribution adds a feature and is not just a bugfix. Moreover, writing an descriptive commit message is highly recommended. In case of doubt, you can check the commit history with: git log --graph --decorate --pretty=oneline --abbrev-commit --all to look for recurring communication patterns. Please check that your changes don't break any unit tests with hatch run test:cov or hatch run test:no-cov to run the unitest with or without coverage reports, respectively.","title":"Implement your changes"},{"location":"contributing/#submit-your-contribution","text":"If everything works fine, push your local branch to the remote server with: git push -u origin my-feature Go to the web page of your fork and click \"Create pull request\" to send your changes for review. Find more detailed information in creating a PR . You might also want to open the PR as a draft first and mark it as ready for review after the feedbacks from the continuous integration (CI) system or any required fixes. Even though, these resources focus on open source projects and communities, the general ideas behind collaborating with other developers to collectively create software are general and can be applied to all sorts of environments, including private companies and proprietary code bases. \u21a9","title":"Submit your contribution"},{"location":"license/","text":"The MIT License (MIT) Copyright \u00a9 2022 Florian Wilhelm Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"reference/SUMMARY/","text":"pytanis config google helpdesk pretalx client types utils","title":"SUMMARY"},{"location":"reference/pytanis/","text":"pytanis \u00b6 __all__ = [ '__version__' , 'GoogleAPI' , 'PretalxAPI' ] module-attribute \u00b6 __version__ = version ( 'pytanis' ) module-attribute \u00b6 GoogleAPI ( config : Optional [ Config ] = None , scopes : List [ str ] = RO_SCOPE ) \u00b6 Source code in pytanis/google.py def __init__ ( self , config : Optional [ Config ] = None , scopes : List [ str ] = RO_SCOPE ): if config is None : config = get_cfg () self . config = config self . scopes = scopes config = config instance-attribute \u00b6 scopes = scopes instance-attribute \u00b6 gsheet ( spreadsheet_id : str , range : str , kwargs ) -> Dict [ str , Any ] \u00b6 Retrieve a google sheet Source code in pytanis/google.py def gsheet ( self , spreadsheet_id : str , range : str , ** kwargs ) -> Dict [ str , Any ]: \"\"\"Retrieve a google sheet\"\"\" creds = self . _get_creds () service = build ( 'sheets' , 'v4' , credentials = creds ) sheet = service . spreadsheets () # https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/get gsheet = sheet . values () . get ( spreadsheetId = spreadsheet_id , range = range , ** kwargs ) . execute () return gsheet gsheet_as_df ( spreadsheet_id : str , range : str , header : bool = True ) -> pd . DataFrame \u00b6 Source code in pytanis/google.py def gsheet_as_df ( self , spreadsheet_id : str , range : str , header : bool = True ) -> pd . DataFrame : gsheet = self . gsheet ( spreadsheet_id , range , majorDimension = \"COLUMNS\" ) return gsheet_to_df ( gsheet , header ) init_token ( recreate : bool = False ) \u00b6 Init the API token by creating it if not available Remember to recreate the token everytime you change the scopes. This function will open a browser window for authentication. Source code in pytanis/google.py def init_token ( self , recreate : bool = False ): \"\"\"Init the API token by creating it if not available Remember to recreate the token everytime you change the scopes. This function will open a browser window for authentication. \"\"\" token_path = self . config . Google . token_json if not recreate and token_path . exists (): return secret_path = self . config . Google . client_secret_json flow = InstalledAppFlow . from_client_secrets_file ( secret_path , self . scopes ) creds = flow . run_local_server ( port = 0 ) with open ( token_path , 'w' ) as fh : fh . write ( creds . to_json ()) PretalxAPI ( config : Optional [ Config ] = None ) \u00b6 Client for the Pretalx API Source code in pytanis/pretalx/client.py def __init__ ( self , config : Optional [ Config ] = None ): if config is None : config = get_cfg () self . config = config self . _get_orig = self . _get self . set_throttling ( 1 , 2 ) # we are nice by default config = config instance-attribute \u00b6 answer ( event_slug : str , id : int , * , params : Optional [ Dict [ str , str ]] = None ) -> Answer \u00b6 Returns a specific answer Source code in pytanis/pretalx/client.py def answer ( self , event_slug : str , id : int , * , params : Optional [ Dict [ str , str ]] = None ) -> Answer : \"\"\"Returns a specific answer\"\"\" return self . _endpoint_id ( Answer , event_slug , \"answers\" , id , params = params ) answers ( event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Answer ]] \u00b6 Lists all answers and their details Source code in pytanis/pretalx/client.py def answers ( self , event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Answer ]]: \"\"\"Lists all answers and their details\"\"\" return self . _endpoint_lst ( Answer , event_slug , \"answers\" , params = params ) event ( event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Event \u00b6 Returns detailed information about a specific event Source code in pytanis/pretalx/client.py def event ( self , event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Event : \"\"\"Returns detailed information about a specific event\"\"\" endpoint = f \"/api/events/ { event_slug } /\" result = self . _get_one ( endpoint , params ) logger . debug ( \"result\" , resp = result ) return Event . parse_obj ( result ) events ( * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Event ]] \u00b6 Lists all events and their details Source code in pytanis/pretalx/client.py def events ( self , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Event ]]: \"\"\"Lists all events and their details\"\"\" count , results = self . _get_many ( \"/api/events/\" , params ) results = (( logger . debug ( \"result\" , resp = r ), Event . parse_obj ( r ))[ 1 ] for r in results ) return count , results me () -> Me \u00b6 Returns what Pretalx knows about myself Source code in pytanis/pretalx/client.py def me ( self ) -> Me : \"\"\"Returns what Pretalx knows about myself\"\"\" result = self . _get_one ( \"/api/me\" ) return Me . parse_obj ( result ) question ( event_slug : str , id : int , * , params : Optional [ Dict [ str , str ]] = None ) -> Question \u00b6 Returns a specific question Source code in pytanis/pretalx/client.py def question ( self , event_slug : str , id : int , * , params : Optional [ Dict [ str , str ]] = None ) -> Question : \"\"\"Returns a specific question\"\"\" return self . _endpoint_id ( Question , event_slug , \"questions\" , id , params = params ) questions ( event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Question ]] \u00b6 Lists all questions and their details Source code in pytanis/pretalx/client.py def questions ( self , event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Question ]]: \"\"\"Lists all questions and their details\"\"\" return self . _endpoint_lst ( Question , event_slug , \"questions\" , params = params ) review ( event_slug : str , id : int , * , params : Optional [ Dict [ str , str ]] = None ) -> Review \u00b6 Returns a specific review Source code in pytanis/pretalx/client.py def review ( self , event_slug : str , id : int , * , params : Optional [ Dict [ str , str ]] = None ) -> Review : \"\"\"Returns a specific review\"\"\" return self . _endpoint_id ( Review , event_slug , \"reviews\" , id , params = params ) reviews ( event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Review ]] \u00b6 Lists all reviews and their details Source code in pytanis/pretalx/client.py def reviews ( self , event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Review ]]: \"\"\"Lists all reviews and their details\"\"\" return self . _endpoint_lst ( Review , event_slug , \"reviews\" , params = params ) room ( event_slug : str , id : int , * , params : Optional [ Dict [ str , str ]] = None ) -> Room \u00b6 Returns a specific room Source code in pytanis/pretalx/client.py def room ( self , event_slug : str , id : int , * , params : Optional [ Dict [ str , str ]] = None ) -> Room : \"\"\"Returns a specific room\"\"\" return self . _endpoint_id ( Room , event_slug , \"rooms\" , id , params = params ) rooms ( event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Room ]] \u00b6 Lists all rooms and their details Source code in pytanis/pretalx/client.py def rooms ( self , event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Room ]]: \"\"\"Lists all rooms and their details\"\"\" return self . _endpoint_lst ( Room , event_slug , \"rooms\" , params = params ) set_throttling ( calls : int , seconds : int ) \u00b6 Throttle the number of calls per seconds to the Pretalx API Source code in pytanis/pretalx/client.py def set_throttling ( self , calls : int , seconds : int ): \"\"\"Throttle the number of calls per seconds to the Pretalx API\"\"\" logger . debug ( \"throttling\" , calls = calls , seconds = seconds ) self . _get = throttle ( calls , seconds )( self . _get_orig ) speaker ( event_slug : str , code : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Speaker \u00b6 Returns a specific speaker Source code in pytanis/pretalx/client.py def speaker ( self , event_slug : str , code : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Speaker : \"\"\"Returns a specific speaker\"\"\" return self . _endpoint_id ( Speaker , event_slug , \"speakers\" , code , params = params ) speakers ( event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Speaker ]] \u00b6 Lists all speakers and their details Source code in pytanis/pretalx/client.py def speakers ( self , event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Speaker ]]: \"\"\"Lists all speakers and their details\"\"\" return self . _endpoint_lst ( Speaker , event_slug , \"speakers\" , params = params ) submission ( event_slug : str , code : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Submission \u00b6 Returns a specific submission Source code in pytanis/pretalx/client.py def submission ( self , event_slug : str , code : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Submission : \"\"\"Returns a specific submission\"\"\" return self . _endpoint_id ( Submission , event_slug , \"submissions\" , code , params = params ) submissions ( event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Submission ]] \u00b6 Lists all submissions and their details Source code in pytanis/pretalx/client.py def submissions ( self , event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Submission ]]: \"\"\"Lists all submissions and their details\"\"\" return self . _endpoint_lst ( Submission , event_slug , \"submissions\" , params = params ) tag ( event_slug : str , tag : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tag \u00b6 Returns a specific tag Source code in pytanis/pretalx/client.py def tag ( self , event_slug : str , tag : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tag : \"\"\"Returns a specific tag\"\"\" return self . _endpoint_id ( Tag , event_slug , \"tags\" , tag , params = params ) tags ( event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Tag ]] \u00b6 Lists all tags and their details Source code in pytanis/pretalx/client.py def tags ( self , event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Tag ]]: \"\"\"Lists all tags and their details\"\"\" return self . _endpoint_lst ( Tag , event_slug , \"tags\" , params = params ) talk ( event_slug : str , code : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Talk \u00b6 Returns a specific talk Source code in pytanis/pretalx/client.py def talk ( self , event_slug : str , code : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Talk : \"\"\"Returns a specific talk\"\"\" return self . _endpoint_id ( Talk , event_slug , \"talks\" , code , params = params ) talks ( event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Talk ]] \u00b6 Lists all talks and their details Source code in pytanis/pretalx/client.py def talks ( self , event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Talk ]]: \"\"\"Lists all talks and their details\"\"\" return self . _endpoint_lst ( Talk , event_slug , \"talks\" , params = params )","title":"pytanis"},{"location":"reference/pytanis/#pytanis","text":"","title":"pytanis"},{"location":"reference/pytanis/#pytanis.__all__","text":"","title":"__all__"},{"location":"reference/pytanis/#pytanis.__version__","text":"","title":"__version__"},{"location":"reference/pytanis/#pytanis.GoogleAPI","text":"Source code in pytanis/google.py def __init__ ( self , config : Optional [ Config ] = None , scopes : List [ str ] = RO_SCOPE ): if config is None : config = get_cfg () self . config = config self . scopes = scopes","title":"GoogleAPI"},{"location":"reference/pytanis/#pytanis.google.GoogleAPI.config","text":"","title":"config"},{"location":"reference/pytanis/#pytanis.google.GoogleAPI.scopes","text":"","title":"scopes"},{"location":"reference/pytanis/#pytanis.google.GoogleAPI.gsheet","text":"Retrieve a google sheet Source code in pytanis/google.py def gsheet ( self , spreadsheet_id : str , range : str , ** kwargs ) -> Dict [ str , Any ]: \"\"\"Retrieve a google sheet\"\"\" creds = self . _get_creds () service = build ( 'sheets' , 'v4' , credentials = creds ) sheet = service . spreadsheets () # https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/get gsheet = sheet . values () . get ( spreadsheetId = spreadsheet_id , range = range , ** kwargs ) . execute () return gsheet","title":"gsheet()"},{"location":"reference/pytanis/#pytanis.google.GoogleAPI.gsheet_as_df","text":"Source code in pytanis/google.py def gsheet_as_df ( self , spreadsheet_id : str , range : str , header : bool = True ) -> pd . DataFrame : gsheet = self . gsheet ( spreadsheet_id , range , majorDimension = \"COLUMNS\" ) return gsheet_to_df ( gsheet , header )","title":"gsheet_as_df()"},{"location":"reference/pytanis/#pytanis.google.GoogleAPI.init_token","text":"Init the API token by creating it if not available Remember to recreate the token everytime you change the scopes. This function will open a browser window for authentication. Source code in pytanis/google.py def init_token ( self , recreate : bool = False ): \"\"\"Init the API token by creating it if not available Remember to recreate the token everytime you change the scopes. This function will open a browser window for authentication. \"\"\" token_path = self . config . Google . token_json if not recreate and token_path . exists (): return secret_path = self . config . Google . client_secret_json flow = InstalledAppFlow . from_client_secrets_file ( secret_path , self . scopes ) creds = flow . run_local_server ( port = 0 ) with open ( token_path , 'w' ) as fh : fh . write ( creds . to_json ())","title":"init_token()"},{"location":"reference/pytanis/#pytanis.PretalxAPI","text":"Client for the Pretalx API Source code in pytanis/pretalx/client.py def __init__ ( self , config : Optional [ Config ] = None ): if config is None : config = get_cfg () self . config = config self . _get_orig = self . _get self . set_throttling ( 1 , 2 ) # we are nice by default","title":"PretalxAPI"},{"location":"reference/pytanis/#pytanis.pretalx.client.PretalxAPI.config","text":"","title":"config"},{"location":"reference/pytanis/#pytanis.pretalx.client.PretalxAPI.answer","text":"Returns a specific answer Source code in pytanis/pretalx/client.py def answer ( self , event_slug : str , id : int , * , params : Optional [ Dict [ str , str ]] = None ) -> Answer : \"\"\"Returns a specific answer\"\"\" return self . _endpoint_id ( Answer , event_slug , \"answers\" , id , params = params )","title":"answer()"},{"location":"reference/pytanis/#pytanis.pretalx.client.PretalxAPI.answers","text":"Lists all answers and their details Source code in pytanis/pretalx/client.py def answers ( self , event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Answer ]]: \"\"\"Lists all answers and their details\"\"\" return self . _endpoint_lst ( Answer , event_slug , \"answers\" , params = params )","title":"answers()"},{"location":"reference/pytanis/#pytanis.pretalx.client.PretalxAPI.event","text":"Returns detailed information about a specific event Source code in pytanis/pretalx/client.py def event ( self , event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Event : \"\"\"Returns detailed information about a specific event\"\"\" endpoint = f \"/api/events/ { event_slug } /\" result = self . _get_one ( endpoint , params ) logger . debug ( \"result\" , resp = result ) return Event . parse_obj ( result )","title":"event()"},{"location":"reference/pytanis/#pytanis.pretalx.client.PretalxAPI.events","text":"Lists all events and their details Source code in pytanis/pretalx/client.py def events ( self , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Event ]]: \"\"\"Lists all events and their details\"\"\" count , results = self . _get_many ( \"/api/events/\" , params ) results = (( logger . debug ( \"result\" , resp = r ), Event . parse_obj ( r ))[ 1 ] for r in results ) return count , results","title":"events()"},{"location":"reference/pytanis/#pytanis.pretalx.client.PretalxAPI.me","text":"Returns what Pretalx knows about myself Source code in pytanis/pretalx/client.py def me ( self ) -> Me : \"\"\"Returns what Pretalx knows about myself\"\"\" result = self . _get_one ( \"/api/me\" ) return Me . parse_obj ( result )","title":"me()"},{"location":"reference/pytanis/#pytanis.pretalx.client.PretalxAPI.question","text":"Returns a specific question Source code in pytanis/pretalx/client.py def question ( self , event_slug : str , id : int , * , params : Optional [ Dict [ str , str ]] = None ) -> Question : \"\"\"Returns a specific question\"\"\" return self . _endpoint_id ( Question , event_slug , \"questions\" , id , params = params )","title":"question()"},{"location":"reference/pytanis/#pytanis.pretalx.client.PretalxAPI.questions","text":"Lists all questions and their details Source code in pytanis/pretalx/client.py def questions ( self , event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Question ]]: \"\"\"Lists all questions and their details\"\"\" return self . _endpoint_lst ( Question , event_slug , \"questions\" , params = params )","title":"questions()"},{"location":"reference/pytanis/#pytanis.pretalx.client.PretalxAPI.review","text":"Returns a specific review Source code in pytanis/pretalx/client.py def review ( self , event_slug : str , id : int , * , params : Optional [ Dict [ str , str ]] = None ) -> Review : \"\"\"Returns a specific review\"\"\" return self . _endpoint_id ( Review , event_slug , \"reviews\" , id , params = params )","title":"review()"},{"location":"reference/pytanis/#pytanis.pretalx.client.PretalxAPI.reviews","text":"Lists all reviews and their details Source code in pytanis/pretalx/client.py def reviews ( self , event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Review ]]: \"\"\"Lists all reviews and their details\"\"\" return self . _endpoint_lst ( Review , event_slug , \"reviews\" , params = params )","title":"reviews()"},{"location":"reference/pytanis/#pytanis.pretalx.client.PretalxAPI.room","text":"Returns a specific room Source code in pytanis/pretalx/client.py def room ( self , event_slug : str , id : int , * , params : Optional [ Dict [ str , str ]] = None ) -> Room : \"\"\"Returns a specific room\"\"\" return self . _endpoint_id ( Room , event_slug , \"rooms\" , id , params = params )","title":"room()"},{"location":"reference/pytanis/#pytanis.pretalx.client.PretalxAPI.rooms","text":"Lists all rooms and their details Source code in pytanis/pretalx/client.py def rooms ( self , event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Room ]]: \"\"\"Lists all rooms and their details\"\"\" return self . _endpoint_lst ( Room , event_slug , \"rooms\" , params = params )","title":"rooms()"},{"location":"reference/pytanis/#pytanis.pretalx.client.PretalxAPI.set_throttling","text":"Throttle the number of calls per seconds to the Pretalx API Source code in pytanis/pretalx/client.py def set_throttling ( self , calls : int , seconds : int ): \"\"\"Throttle the number of calls per seconds to the Pretalx API\"\"\" logger . debug ( \"throttling\" , calls = calls , seconds = seconds ) self . _get = throttle ( calls , seconds )( self . _get_orig )","title":"set_throttling()"},{"location":"reference/pytanis/#pytanis.pretalx.client.PretalxAPI.speaker","text":"Returns a specific speaker Source code in pytanis/pretalx/client.py def speaker ( self , event_slug : str , code : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Speaker : \"\"\"Returns a specific speaker\"\"\" return self . _endpoint_id ( Speaker , event_slug , \"speakers\" , code , params = params )","title":"speaker()"},{"location":"reference/pytanis/#pytanis.pretalx.client.PretalxAPI.speakers","text":"Lists all speakers and their details Source code in pytanis/pretalx/client.py def speakers ( self , event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Speaker ]]: \"\"\"Lists all speakers and their details\"\"\" return self . _endpoint_lst ( Speaker , event_slug , \"speakers\" , params = params )","title":"speakers()"},{"location":"reference/pytanis/#pytanis.pretalx.client.PretalxAPI.submission","text":"Returns a specific submission Source code in pytanis/pretalx/client.py def submission ( self , event_slug : str , code : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Submission : \"\"\"Returns a specific submission\"\"\" return self . _endpoint_id ( Submission , event_slug , \"submissions\" , code , params = params )","title":"submission()"},{"location":"reference/pytanis/#pytanis.pretalx.client.PretalxAPI.submissions","text":"Lists all submissions and their details Source code in pytanis/pretalx/client.py def submissions ( self , event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Submission ]]: \"\"\"Lists all submissions and their details\"\"\" return self . _endpoint_lst ( Submission , event_slug , \"submissions\" , params = params )","title":"submissions()"},{"location":"reference/pytanis/#pytanis.pretalx.client.PretalxAPI.tag","text":"Returns a specific tag Source code in pytanis/pretalx/client.py def tag ( self , event_slug : str , tag : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tag : \"\"\"Returns a specific tag\"\"\" return self . _endpoint_id ( Tag , event_slug , \"tags\" , tag , params = params )","title":"tag()"},{"location":"reference/pytanis/#pytanis.pretalx.client.PretalxAPI.tags","text":"Lists all tags and their details Source code in pytanis/pretalx/client.py def tags ( self , event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Tag ]]: \"\"\"Lists all tags and their details\"\"\" return self . _endpoint_lst ( Tag , event_slug , \"tags\" , params = params )","title":"tags()"},{"location":"reference/pytanis/#pytanis.pretalx.client.PretalxAPI.talk","text":"Returns a specific talk Source code in pytanis/pretalx/client.py def talk ( self , event_slug : str , code : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Talk : \"\"\"Returns a specific talk\"\"\" return self . _endpoint_id ( Talk , event_slug , \"talks\" , code , params = params )","title":"talk()"},{"location":"reference/pytanis/#pytanis.pretalx.client.PretalxAPI.talks","text":"Lists all talks and their details Source code in pytanis/pretalx/client.py def talks ( self , event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Talk ]]: \"\"\"Lists all talks and their details\"\"\" return self . _endpoint_lst ( Talk , event_slug , \"talks\" , params = params )","title":"talks()"},{"location":"reference/pytanis/config/","text":"config \u00b6 Handling the configuration PYTANIS_CFG_PATH : str = '.pytanis/config.toml' module-attribute \u00b6 Path within $HOME to the configuration file of Pytanis PYTANIS_ENV : str = 'PYTANIS_CONFIG' module-attribute \u00b6 Name of the environment variable to look up the path for the config Config \u00b6 Main configuration object Google : Google class-attribute \u00b6 HelpDesk : HelpDesk class-attribute \u00b6 Pretalx : Pretalx class-attribute \u00b6 cfg_path : FilePath class-attribute \u00b6 convert_json_path ( v , values ) classmethod \u00b6 Source code in pytanis/config.py @validator ( \"Google\" ) @classmethod def convert_json_path ( cls , v , values ): def make_rel_path_abs ( entry ): if entry is not None and not entry . is_absolute (): entry = values [ \"cfg_path\" ] . parent / entry return entry v . client_secret_json = make_rel_path_abs ( v . client_secret_json ) v . token_json = make_rel_path_abs ( v . token_json ) return v Google \u00b6 Configuration related to the Google API client_secret_json : Optional [ Path ] class-attribute \u00b6 token_json : Optional [ Path ] class-attribute \u00b6 HelpDesk \u00b6 Configuration related to the HelpDesk API account : Optional [ str ] class-attribute \u00b6 entity_id : Optional [ str ] class-attribute \u00b6 token : Optional [ str ] class-attribute \u00b6 Pretalx \u00b6 Configuration related to the Pretalx API api_token : Optional [ str ] class-attribute \u00b6 get_cfg () -> Config \u00b6 Returns the configuration as an object Source code in pytanis/config.py def get_cfg () -> Config : \"\"\"Returns the configuration as an object\"\"\" cfg_path = get_cfg_file () with open ( cfg_path , \"rb\" ) as fh : cfg_dict = tomli . load ( fh ) # add config path to later resolve relative paths of config values cfg_dict [ \"cfg_path\" ] = cfg_path return Config . parse_obj ( cfg_dict ) get_cfg_file () -> Path \u00b6 Determines the path of the config file Source code in pytanis/config.py def get_cfg_file () -> Path : \"\"\"Determines the path of the config file\"\"\" path = os . environ . get ( PYTANIS_ENV , None ) if path is None : path = Path . home () / Path ( PYTANIS_CFG_PATH ) else : path = Path ( path ) return path","title":"config"},{"location":"reference/pytanis/config/#pytanis.config","text":"Handling the configuration","title":"config"},{"location":"reference/pytanis/config/#pytanis.config.PYTANIS_CFG_PATH","text":"Path within $HOME to the configuration file of Pytanis","title":"PYTANIS_CFG_PATH"},{"location":"reference/pytanis/config/#pytanis.config.PYTANIS_ENV","text":"Name of the environment variable to look up the path for the config","title":"PYTANIS_ENV"},{"location":"reference/pytanis/config/#pytanis.config.Config","text":"Main configuration object","title":"Config"},{"location":"reference/pytanis/config/#pytanis.config.Config.Google","text":"","title":"Google"},{"location":"reference/pytanis/config/#pytanis.config.Config.HelpDesk","text":"","title":"HelpDesk"},{"location":"reference/pytanis/config/#pytanis.config.Config.Pretalx","text":"","title":"Pretalx"},{"location":"reference/pytanis/config/#pytanis.config.Config.cfg_path","text":"","title":"cfg_path"},{"location":"reference/pytanis/config/#pytanis.config.Config.convert_json_path","text":"Source code in pytanis/config.py @validator ( \"Google\" ) @classmethod def convert_json_path ( cls , v , values ): def make_rel_path_abs ( entry ): if entry is not None and not entry . is_absolute (): entry = values [ \"cfg_path\" ] . parent / entry return entry v . client_secret_json = make_rel_path_abs ( v . client_secret_json ) v . token_json = make_rel_path_abs ( v . token_json ) return v","title":"convert_json_path()"},{"location":"reference/pytanis/config/#pytanis.config.Google","text":"Configuration related to the Google API","title":"Google"},{"location":"reference/pytanis/config/#pytanis.config.Google.client_secret_json","text":"","title":"client_secret_json"},{"location":"reference/pytanis/config/#pytanis.config.Google.token_json","text":"","title":"token_json"},{"location":"reference/pytanis/config/#pytanis.config.HelpDesk","text":"Configuration related to the HelpDesk API","title":"HelpDesk"},{"location":"reference/pytanis/config/#pytanis.config.HelpDesk.account","text":"","title":"account"},{"location":"reference/pytanis/config/#pytanis.config.HelpDesk.entity_id","text":"","title":"entity_id"},{"location":"reference/pytanis/config/#pytanis.config.HelpDesk.token","text":"","title":"token"},{"location":"reference/pytanis/config/#pytanis.config.Pretalx","text":"Configuration related to the Pretalx API","title":"Pretalx"},{"location":"reference/pytanis/config/#pytanis.config.Pretalx.api_token","text":"","title":"api_token"},{"location":"reference/pytanis/config/#pytanis.config.get_cfg","text":"Returns the configuration as an object Source code in pytanis/config.py def get_cfg () -> Config : \"\"\"Returns the configuration as an object\"\"\" cfg_path = get_cfg_file () with open ( cfg_path , \"rb\" ) as fh : cfg_dict = tomli . load ( fh ) # add config path to later resolve relative paths of config values cfg_dict [ \"cfg_path\" ] = cfg_path return Config . parse_obj ( cfg_dict )","title":"get_cfg()"},{"location":"reference/pytanis/config/#pytanis.config.get_cfg_file","text":"Determines the path of the config file Source code in pytanis/config.py def get_cfg_file () -> Path : \"\"\"Determines the path of the config file\"\"\" path = os . environ . get ( PYTANIS_ENV , None ) if path is None : path = Path . home () / Path ( PYTANIS_CFG_PATH ) else : path = Path ( path ) return path","title":"get_cfg_file()"},{"location":"reference/pytanis/google/","text":"google \u00b6 Functionality around the Google API Documentation: https://developers.google.com/sheets/api/quickstart/python RO_SCOPE = [ 'https://www.googleapis.com/auth/spreadsheets.readonly' ] module-attribute \u00b6 GoogleAPI ( config : Optional [ Config ] = None , scopes : List [ str ] = RO_SCOPE ) \u00b6 Source code in pytanis/google.py def __init__ ( self , config : Optional [ Config ] = None , scopes : List [ str ] = RO_SCOPE ): if config is None : config = get_cfg () self . config = config self . scopes = scopes config = config instance-attribute \u00b6 scopes = scopes instance-attribute \u00b6 gsheet ( spreadsheet_id : str , range : str , kwargs ) -> Dict [ str , Any ] \u00b6 Retrieve a google sheet Source code in pytanis/google.py def gsheet ( self , spreadsheet_id : str , range : str , ** kwargs ) -> Dict [ str , Any ]: \"\"\"Retrieve a google sheet\"\"\" creds = self . _get_creds () service = build ( 'sheets' , 'v4' , credentials = creds ) sheet = service . spreadsheets () # https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/get gsheet = sheet . values () . get ( spreadsheetId = spreadsheet_id , range = range , ** kwargs ) . execute () return gsheet gsheet_as_df ( spreadsheet_id : str , range : str , header : bool = True ) -> pd . DataFrame \u00b6 Source code in pytanis/google.py def gsheet_as_df ( self , spreadsheet_id : str , range : str , header : bool = True ) -> pd . DataFrame : gsheet = self . gsheet ( spreadsheet_id , range , majorDimension = \"COLUMNS\" ) return gsheet_to_df ( gsheet , header ) init_token ( recreate : bool = False ) \u00b6 Init the API token by creating it if not available Remember to recreate the token everytime you change the scopes. This function will open a browser window for authentication. Source code in pytanis/google.py def init_token ( self , recreate : bool = False ): \"\"\"Init the API token by creating it if not available Remember to recreate the token everytime you change the scopes. This function will open a browser window for authentication. \"\"\" token_path = self . config . Google . token_json if not recreate and token_path . exists (): return secret_path = self . config . Google . client_secret_json flow = InstalledAppFlow . from_client_secrets_file ( secret_path , self . scopes ) creds = flow . run_local_server ( port = 0 ) with open ( token_path , 'w' ) as fh : fh . write ( creds . to_json ()) gsheet_to_df ( gsheet : Dict [ str , Any ], header : bool = True ) -> pd . DataFrame \u00b6 Transform a Google Sheet into a Pandas DataFrame Requires a gsheet with columns as major dimension Source code in pytanis/google.py def gsheet_to_df ( gsheet : Dict [ str , Any ], header : bool = True ) -> pd . DataFrame : \"\"\"Transform a Google Sheet into a Pandas DataFrame Requires a gsheet with columns as major dimension \"\"\" values = gsheet . get ( 'values' , []) if not values : return pd . DataFrame () if header : columns = [ col . pop ( 0 ) for col in values ] else : columns = list ( range ( len ( values ))) padded_values = zip ( * itertools . zip_longest ( * values , fillvalue = '' )) data = { col : val for col , val in zip ( columns , padded_values )} return pd . DataFrame ( data )","title":"google"},{"location":"reference/pytanis/google/#pytanis.google","text":"Functionality around the Google API Documentation: https://developers.google.com/sheets/api/quickstart/python","title":"google"},{"location":"reference/pytanis/google/#pytanis.google.RO_SCOPE","text":"","title":"RO_SCOPE"},{"location":"reference/pytanis/google/#pytanis.google.GoogleAPI","text":"Source code in pytanis/google.py def __init__ ( self , config : Optional [ Config ] = None , scopes : List [ str ] = RO_SCOPE ): if config is None : config = get_cfg () self . config = config self . scopes = scopes","title":"GoogleAPI"},{"location":"reference/pytanis/google/#pytanis.google.GoogleAPI.config","text":"","title":"config"},{"location":"reference/pytanis/google/#pytanis.google.GoogleAPI.scopes","text":"","title":"scopes"},{"location":"reference/pytanis/google/#pytanis.google.GoogleAPI.gsheet","text":"Retrieve a google sheet Source code in pytanis/google.py def gsheet ( self , spreadsheet_id : str , range : str , ** kwargs ) -> Dict [ str , Any ]: \"\"\"Retrieve a google sheet\"\"\" creds = self . _get_creds () service = build ( 'sheets' , 'v4' , credentials = creds ) sheet = service . spreadsheets () # https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/get gsheet = sheet . values () . get ( spreadsheetId = spreadsheet_id , range = range , ** kwargs ) . execute () return gsheet","title":"gsheet()"},{"location":"reference/pytanis/google/#pytanis.google.GoogleAPI.gsheet_as_df","text":"Source code in pytanis/google.py def gsheet_as_df ( self , spreadsheet_id : str , range : str , header : bool = True ) -> pd . DataFrame : gsheet = self . gsheet ( spreadsheet_id , range , majorDimension = \"COLUMNS\" ) return gsheet_to_df ( gsheet , header )","title":"gsheet_as_df()"},{"location":"reference/pytanis/google/#pytanis.google.GoogleAPI.init_token","text":"Init the API token by creating it if not available Remember to recreate the token everytime you change the scopes. This function will open a browser window for authentication. Source code in pytanis/google.py def init_token ( self , recreate : bool = False ): \"\"\"Init the API token by creating it if not available Remember to recreate the token everytime you change the scopes. This function will open a browser window for authentication. \"\"\" token_path = self . config . Google . token_json if not recreate and token_path . exists (): return secret_path = self . config . Google . client_secret_json flow = InstalledAppFlow . from_client_secrets_file ( secret_path , self . scopes ) creds = flow . run_local_server ( port = 0 ) with open ( token_path , 'w' ) as fh : fh . write ( creds . to_json ())","title":"init_token()"},{"location":"reference/pytanis/google/#pytanis.google.gsheet_to_df","text":"Transform a Google Sheet into a Pandas DataFrame Requires a gsheet with columns as major dimension Source code in pytanis/google.py def gsheet_to_df ( gsheet : Dict [ str , Any ], header : bool = True ) -> pd . DataFrame : \"\"\"Transform a Google Sheet into a Pandas DataFrame Requires a gsheet with columns as major dimension \"\"\" values = gsheet . get ( 'values' , []) if not values : return pd . DataFrame () if header : columns = [ col . pop ( 0 ) for col in values ] else : columns = list ( range ( len ( values ))) padded_values = zip ( * itertools . zip_longest ( * values , fillvalue = '' )) data = { col : val for col , val in zip ( columns , padded_values )} return pd . DataFrame ( data )","title":"gsheet_to_df()"},{"location":"reference/pytanis/helpdesk/","text":"helpdesk \u00b6 Functionality around the HelpDesk / LiveChat API","title":"helpdesk"},{"location":"reference/pytanis/helpdesk/#pytanis.helpdesk","text":"Functionality around the HelpDesk / LiveChat API","title":"helpdesk"},{"location":"reference/pytanis/utils/","text":"utils \u00b6 Additional utilities RT = TypeVar ( 'RT' ) module-attribute \u00b6 pretty_timedelta ( seconds : int ) -> str \u00b6 Converts timedelta in seconds to human-readable string Parameters: Name Type Description Default seconds int time delta in seconds required Returns: Type Description str timedelta as pretty string Source code in pytanis/utils.py def pretty_timedelta ( seconds : int ) -> str : \"\"\"Converts timedelta in seconds to human-readable string Args: seconds: time delta in seconds Returns: timedelta as pretty string \"\"\" sign = '-' if seconds < 0 else '' seconds = abs ( int ( seconds )) days , seconds = divmod ( seconds , 86400 ) hours , seconds = divmod ( seconds , 3600 ) minutes , seconds = divmod ( seconds , 60 ) if days > 0 : return ' {}{} d {} h {} m {} s' . format ( sign , days , hours , minutes , seconds ) elif hours > 0 : return ' {}{} h {} m {} s' . format ( sign , hours , minutes , seconds ) elif minutes > 0 : return ' {}{} m {} s' . format ( sign , minutes , seconds ) else : return ' {}{} s' . format ( sign , seconds ) rm_keys ( keys : Union [ Any , List [ Any ]], dct : Dict [ Any , Any ]) -> Dict [ Any , Any ] \u00b6 Return a copy with keys removed from dictionary Source code in pytanis/utils.py def rm_keys ( keys : Union [ Any , List [ Any ]], dct : Dict [ Any , Any ], ) -> Dict [ Any , Any ]: \"\"\"Return a copy with keys removed from dictionary\"\"\" if not isinstance ( keys , list ): keys = [ keys ] return { k : v for k , v in dct . items () if k not in keys } throttle ( calls : int , seconds : int = 1 ) -> Callable [[ Callable [ ... , RT ]], Callable [ ... , RT ]] \u00b6 Decorator for throttling a function to number of calls per seconds Parameters: Name Type Description Default calls int number of calls per interval required seconds int number of seconds in interval 1 Returns: Type Description Callable [[ Callable [..., RT ]], Callable [..., RT ]] wrapped function Source code in pytanis/utils.py def throttle ( calls : int , seconds : int = 1 ) -> Callable [[ Callable [ ... , RT ]], Callable [ ... , RT ]]: \"\"\"Decorator for throttling a function to number of calls per seconds Args: calls: number of calls per interval seconds: number of seconds in interval Returns: wrapped function \"\"\" assert isinstance ( calls , int ), 'number of calls must be integer' assert isinstance ( seconds , int ), 'number of seconds must be integer' def decorator ( func : Callable [ ... , RT ]) -> Callable [ ... , RT ]: # keeps track of the last calls last_calls = list () @functools . wraps ( func ) def wrapper ( * args , ** kwargs ) -> RT : curr_time = time . time () if last_calls : # remove calls from last_calls list older than interval in seconds idx_old_calls = [ i for i , t in enumerate ( last_calls ) if t < curr_time - seconds ] if idx_old_calls : del last_calls [: idx_old_calls [ - 1 ]] if len ( last_calls ) >= calls : idx = len ( last_calls ) - calls delta = fabs ( 1 - curr_time + last_calls [ idx ]) logger = get_logger () logger . debug ( \"stalling call\" , func = func . __name__ , secs = delta ) time . sleep ( delta ) resp = func ( * args , ** kwargs ) last_calls . append ( time . time ()) return resp return wrapper return decorator","title":"utils"},{"location":"reference/pytanis/utils/#pytanis.utils","text":"Additional utilities","title":"utils"},{"location":"reference/pytanis/utils/#pytanis.utils.RT","text":"","title":"RT"},{"location":"reference/pytanis/utils/#pytanis.utils.pretty_timedelta","text":"Converts timedelta in seconds to human-readable string Parameters: Name Type Description Default seconds int time delta in seconds required Returns: Type Description str timedelta as pretty string Source code in pytanis/utils.py def pretty_timedelta ( seconds : int ) -> str : \"\"\"Converts timedelta in seconds to human-readable string Args: seconds: time delta in seconds Returns: timedelta as pretty string \"\"\" sign = '-' if seconds < 0 else '' seconds = abs ( int ( seconds )) days , seconds = divmod ( seconds , 86400 ) hours , seconds = divmod ( seconds , 3600 ) minutes , seconds = divmod ( seconds , 60 ) if days > 0 : return ' {}{} d {} h {} m {} s' . format ( sign , days , hours , minutes , seconds ) elif hours > 0 : return ' {}{} h {} m {} s' . format ( sign , hours , minutes , seconds ) elif minutes > 0 : return ' {}{} m {} s' . format ( sign , minutes , seconds ) else : return ' {}{} s' . format ( sign , seconds )","title":"pretty_timedelta()"},{"location":"reference/pytanis/utils/#pytanis.utils.rm_keys","text":"Return a copy with keys removed from dictionary Source code in pytanis/utils.py def rm_keys ( keys : Union [ Any , List [ Any ]], dct : Dict [ Any , Any ], ) -> Dict [ Any , Any ]: \"\"\"Return a copy with keys removed from dictionary\"\"\" if not isinstance ( keys , list ): keys = [ keys ] return { k : v for k , v in dct . items () if k not in keys }","title":"rm_keys()"},{"location":"reference/pytanis/utils/#pytanis.utils.throttle","text":"Decorator for throttling a function to number of calls per seconds Parameters: Name Type Description Default calls int number of calls per interval required seconds int number of seconds in interval 1 Returns: Type Description Callable [[ Callable [..., RT ]], Callable [..., RT ]] wrapped function Source code in pytanis/utils.py def throttle ( calls : int , seconds : int = 1 ) -> Callable [[ Callable [ ... , RT ]], Callable [ ... , RT ]]: \"\"\"Decorator for throttling a function to number of calls per seconds Args: calls: number of calls per interval seconds: number of seconds in interval Returns: wrapped function \"\"\" assert isinstance ( calls , int ), 'number of calls must be integer' assert isinstance ( seconds , int ), 'number of seconds must be integer' def decorator ( func : Callable [ ... , RT ]) -> Callable [ ... , RT ]: # keeps track of the last calls last_calls = list () @functools . wraps ( func ) def wrapper ( * args , ** kwargs ) -> RT : curr_time = time . time () if last_calls : # remove calls from last_calls list older than interval in seconds idx_old_calls = [ i for i , t in enumerate ( last_calls ) if t < curr_time - seconds ] if idx_old_calls : del last_calls [: idx_old_calls [ - 1 ]] if len ( last_calls ) >= calls : idx = len ( last_calls ) - calls delta = fabs ( 1 - curr_time + last_calls [ idx ]) logger = get_logger () logger . debug ( \"stalling call\" , func = func . __name__ , secs = delta ) time . sleep ( delta ) resp = func ( * args , ** kwargs ) last_calls . append ( time . time ()) return resp return wrapper return decorator","title":"throttle()"},{"location":"reference/pytanis/pretalx/","text":"pretalx \u00b6","title":"pretalx"},{"location":"reference/pytanis/pretalx/#pytanis.pretalx","text":"","title":"pretalx"},{"location":"reference/pytanis/pretalx/client/","text":"client \u00b6 Client for the Pretalx API Documentation: https://docs.pretalx.org/api/ ToDo add additional parameters explicitly like querying according to the API JSON = Union [ JSONObj , JSONLst ] module-attribute \u00b6 Type of the JSON response as returned by the Pretalx API JSONLst = List [ JSONObj ] module-attribute \u00b6 Type of a JSON list of JSON objects JSONObj = Dict [ str , Any ] module-attribute \u00b6 Type of a JSON object (without recursion) T = TypeVar ( 'T' , bound = BaseModel ) module-attribute \u00b6 logger = get_logger () module-attribute \u00b6 PretalxAPI ( config : Optional [ Config ] = None ) \u00b6 Client for the Pretalx API Source code in pytanis/pretalx/client.py def __init__ ( self , config : Optional [ Config ] = None ): if config is None : config = get_cfg () self . config = config self . _get_orig = self . _get self . set_throttling ( 1 , 2 ) # we are nice by default config = config instance-attribute \u00b6 answer ( event_slug : str , id : int , * , params : Optional [ Dict [ str , str ]] = None ) -> Answer \u00b6 Returns a specific answer Source code in pytanis/pretalx/client.py def answer ( self , event_slug : str , id : int , * , params : Optional [ Dict [ str , str ]] = None ) -> Answer : \"\"\"Returns a specific answer\"\"\" return self . _endpoint_id ( Answer , event_slug , \"answers\" , id , params = params ) answers ( event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Answer ]] \u00b6 Lists all answers and their details Source code in pytanis/pretalx/client.py def answers ( self , event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Answer ]]: \"\"\"Lists all answers and their details\"\"\" return self . _endpoint_lst ( Answer , event_slug , \"answers\" , params = params ) event ( event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Event \u00b6 Returns detailed information about a specific event Source code in pytanis/pretalx/client.py def event ( self , event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Event : \"\"\"Returns detailed information about a specific event\"\"\" endpoint = f \"/api/events/ { event_slug } /\" result = self . _get_one ( endpoint , params ) logger . debug ( \"result\" , resp = result ) return Event . parse_obj ( result ) events ( * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Event ]] \u00b6 Lists all events and their details Source code in pytanis/pretalx/client.py def events ( self , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Event ]]: \"\"\"Lists all events and their details\"\"\" count , results = self . _get_many ( \"/api/events/\" , params ) results = (( logger . debug ( \"result\" , resp = r ), Event . parse_obj ( r ))[ 1 ] for r in results ) return count , results me () -> Me \u00b6 Returns what Pretalx knows about myself Source code in pytanis/pretalx/client.py def me ( self ) -> Me : \"\"\"Returns what Pretalx knows about myself\"\"\" result = self . _get_one ( \"/api/me\" ) return Me . parse_obj ( result ) question ( event_slug : str , id : int , * , params : Optional [ Dict [ str , str ]] = None ) -> Question \u00b6 Returns a specific question Source code in pytanis/pretalx/client.py def question ( self , event_slug : str , id : int , * , params : Optional [ Dict [ str , str ]] = None ) -> Question : \"\"\"Returns a specific question\"\"\" return self . _endpoint_id ( Question , event_slug , \"questions\" , id , params = params ) questions ( event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Question ]] \u00b6 Lists all questions and their details Source code in pytanis/pretalx/client.py def questions ( self , event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Question ]]: \"\"\"Lists all questions and their details\"\"\" return self . _endpoint_lst ( Question , event_slug , \"questions\" , params = params ) review ( event_slug : str , id : int , * , params : Optional [ Dict [ str , str ]] = None ) -> Review \u00b6 Returns a specific review Source code in pytanis/pretalx/client.py def review ( self , event_slug : str , id : int , * , params : Optional [ Dict [ str , str ]] = None ) -> Review : \"\"\"Returns a specific review\"\"\" return self . _endpoint_id ( Review , event_slug , \"reviews\" , id , params = params ) reviews ( event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Review ]] \u00b6 Lists all reviews and their details Source code in pytanis/pretalx/client.py def reviews ( self , event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Review ]]: \"\"\"Lists all reviews and their details\"\"\" return self . _endpoint_lst ( Review , event_slug , \"reviews\" , params = params ) room ( event_slug : str , id : int , * , params : Optional [ Dict [ str , str ]] = None ) -> Room \u00b6 Returns a specific room Source code in pytanis/pretalx/client.py def room ( self , event_slug : str , id : int , * , params : Optional [ Dict [ str , str ]] = None ) -> Room : \"\"\"Returns a specific room\"\"\" return self . _endpoint_id ( Room , event_slug , \"rooms\" , id , params = params ) rooms ( event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Room ]] \u00b6 Lists all rooms and their details Source code in pytanis/pretalx/client.py def rooms ( self , event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Room ]]: \"\"\"Lists all rooms and their details\"\"\" return self . _endpoint_lst ( Room , event_slug , \"rooms\" , params = params ) set_throttling ( calls : int , seconds : int ) \u00b6 Throttle the number of calls per seconds to the Pretalx API Source code in pytanis/pretalx/client.py def set_throttling ( self , calls : int , seconds : int ): \"\"\"Throttle the number of calls per seconds to the Pretalx API\"\"\" logger . debug ( \"throttling\" , calls = calls , seconds = seconds ) self . _get = throttle ( calls , seconds )( self . _get_orig ) speaker ( event_slug : str , code : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Speaker \u00b6 Returns a specific speaker Source code in pytanis/pretalx/client.py def speaker ( self , event_slug : str , code : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Speaker : \"\"\"Returns a specific speaker\"\"\" return self . _endpoint_id ( Speaker , event_slug , \"speakers\" , code , params = params ) speakers ( event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Speaker ]] \u00b6 Lists all speakers and their details Source code in pytanis/pretalx/client.py def speakers ( self , event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Speaker ]]: \"\"\"Lists all speakers and their details\"\"\" return self . _endpoint_lst ( Speaker , event_slug , \"speakers\" , params = params ) submission ( event_slug : str , code : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Submission \u00b6 Returns a specific submission Source code in pytanis/pretalx/client.py def submission ( self , event_slug : str , code : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Submission : \"\"\"Returns a specific submission\"\"\" return self . _endpoint_id ( Submission , event_slug , \"submissions\" , code , params = params ) submissions ( event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Submission ]] \u00b6 Lists all submissions and their details Source code in pytanis/pretalx/client.py def submissions ( self , event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Submission ]]: \"\"\"Lists all submissions and their details\"\"\" return self . _endpoint_lst ( Submission , event_slug , \"submissions\" , params = params ) tag ( event_slug : str , tag : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tag \u00b6 Returns a specific tag Source code in pytanis/pretalx/client.py def tag ( self , event_slug : str , tag : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tag : \"\"\"Returns a specific tag\"\"\" return self . _endpoint_id ( Tag , event_slug , \"tags\" , tag , params = params ) tags ( event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Tag ]] \u00b6 Lists all tags and their details Source code in pytanis/pretalx/client.py def tags ( self , event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Tag ]]: \"\"\"Lists all tags and their details\"\"\" return self . _endpoint_lst ( Tag , event_slug , \"tags\" , params = params ) talk ( event_slug : str , code : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Talk \u00b6 Returns a specific talk Source code in pytanis/pretalx/client.py def talk ( self , event_slug : str , code : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Talk : \"\"\"Returns a specific talk\"\"\" return self . _endpoint_id ( Talk , event_slug , \"talks\" , code , params = params ) talks ( event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Talk ]] \u00b6 Lists all talks and their details Source code in pytanis/pretalx/client.py def talks ( self , event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Talk ]]: \"\"\"Lists all talks and their details\"\"\" return self . _endpoint_lst ( Talk , event_slug , \"talks\" , params = params )","title":"client"},{"location":"reference/pytanis/pretalx/client/#pytanis.pretalx.client","text":"Client for the Pretalx API Documentation: https://docs.pretalx.org/api/ ToDo add additional parameters explicitly like querying according to the API","title":"client"},{"location":"reference/pytanis/pretalx/client/#pytanis.pretalx.client.JSON","text":"Type of the JSON response as returned by the Pretalx API","title":"JSON"},{"location":"reference/pytanis/pretalx/client/#pytanis.pretalx.client.JSONLst","text":"Type of a JSON list of JSON objects","title":"JSONLst"},{"location":"reference/pytanis/pretalx/client/#pytanis.pretalx.client.JSONObj","text":"Type of a JSON object (without recursion)","title":"JSONObj"},{"location":"reference/pytanis/pretalx/client/#pytanis.pretalx.client.T","text":"","title":"T"},{"location":"reference/pytanis/pretalx/client/#pytanis.pretalx.client.logger","text":"","title":"logger"},{"location":"reference/pytanis/pretalx/client/#pytanis.pretalx.client.PretalxAPI","text":"Client for the Pretalx API Source code in pytanis/pretalx/client.py def __init__ ( self , config : Optional [ Config ] = None ): if config is None : config = get_cfg () self . config = config self . _get_orig = self . _get self . set_throttling ( 1 , 2 ) # we are nice by default","title":"PretalxAPI"},{"location":"reference/pytanis/pretalx/client/#pytanis.pretalx.client.PretalxAPI.config","text":"","title":"config"},{"location":"reference/pytanis/pretalx/client/#pytanis.pretalx.client.PretalxAPI.answer","text":"Returns a specific answer Source code in pytanis/pretalx/client.py def answer ( self , event_slug : str , id : int , * , params : Optional [ Dict [ str , str ]] = None ) -> Answer : \"\"\"Returns a specific answer\"\"\" return self . _endpoint_id ( Answer , event_slug , \"answers\" , id , params = params )","title":"answer()"},{"location":"reference/pytanis/pretalx/client/#pytanis.pretalx.client.PretalxAPI.answers","text":"Lists all answers and their details Source code in pytanis/pretalx/client.py def answers ( self , event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Answer ]]: \"\"\"Lists all answers and their details\"\"\" return self . _endpoint_lst ( Answer , event_slug , \"answers\" , params = params )","title":"answers()"},{"location":"reference/pytanis/pretalx/client/#pytanis.pretalx.client.PretalxAPI.event","text":"Returns detailed information about a specific event Source code in pytanis/pretalx/client.py def event ( self , event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Event : \"\"\"Returns detailed information about a specific event\"\"\" endpoint = f \"/api/events/ { event_slug } /\" result = self . _get_one ( endpoint , params ) logger . debug ( \"result\" , resp = result ) return Event . parse_obj ( result )","title":"event()"},{"location":"reference/pytanis/pretalx/client/#pytanis.pretalx.client.PretalxAPI.events","text":"Lists all events and their details Source code in pytanis/pretalx/client.py def events ( self , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Event ]]: \"\"\"Lists all events and their details\"\"\" count , results = self . _get_many ( \"/api/events/\" , params ) results = (( logger . debug ( \"result\" , resp = r ), Event . parse_obj ( r ))[ 1 ] for r in results ) return count , results","title":"events()"},{"location":"reference/pytanis/pretalx/client/#pytanis.pretalx.client.PretalxAPI.me","text":"Returns what Pretalx knows about myself Source code in pytanis/pretalx/client.py def me ( self ) -> Me : \"\"\"Returns what Pretalx knows about myself\"\"\" result = self . _get_one ( \"/api/me\" ) return Me . parse_obj ( result )","title":"me()"},{"location":"reference/pytanis/pretalx/client/#pytanis.pretalx.client.PretalxAPI.question","text":"Returns a specific question Source code in pytanis/pretalx/client.py def question ( self , event_slug : str , id : int , * , params : Optional [ Dict [ str , str ]] = None ) -> Question : \"\"\"Returns a specific question\"\"\" return self . _endpoint_id ( Question , event_slug , \"questions\" , id , params = params )","title":"question()"},{"location":"reference/pytanis/pretalx/client/#pytanis.pretalx.client.PretalxAPI.questions","text":"Lists all questions and their details Source code in pytanis/pretalx/client.py def questions ( self , event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Question ]]: \"\"\"Lists all questions and their details\"\"\" return self . _endpoint_lst ( Question , event_slug , \"questions\" , params = params )","title":"questions()"},{"location":"reference/pytanis/pretalx/client/#pytanis.pretalx.client.PretalxAPI.review","text":"Returns a specific review Source code in pytanis/pretalx/client.py def review ( self , event_slug : str , id : int , * , params : Optional [ Dict [ str , str ]] = None ) -> Review : \"\"\"Returns a specific review\"\"\" return self . _endpoint_id ( Review , event_slug , \"reviews\" , id , params = params )","title":"review()"},{"location":"reference/pytanis/pretalx/client/#pytanis.pretalx.client.PretalxAPI.reviews","text":"Lists all reviews and their details Source code in pytanis/pretalx/client.py def reviews ( self , event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Review ]]: \"\"\"Lists all reviews and their details\"\"\" return self . _endpoint_lst ( Review , event_slug , \"reviews\" , params = params )","title":"reviews()"},{"location":"reference/pytanis/pretalx/client/#pytanis.pretalx.client.PretalxAPI.room","text":"Returns a specific room Source code in pytanis/pretalx/client.py def room ( self , event_slug : str , id : int , * , params : Optional [ Dict [ str , str ]] = None ) -> Room : \"\"\"Returns a specific room\"\"\" return self . _endpoint_id ( Room , event_slug , \"rooms\" , id , params = params )","title":"room()"},{"location":"reference/pytanis/pretalx/client/#pytanis.pretalx.client.PretalxAPI.rooms","text":"Lists all rooms and their details Source code in pytanis/pretalx/client.py def rooms ( self , event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Room ]]: \"\"\"Lists all rooms and their details\"\"\" return self . _endpoint_lst ( Room , event_slug , \"rooms\" , params = params )","title":"rooms()"},{"location":"reference/pytanis/pretalx/client/#pytanis.pretalx.client.PretalxAPI.set_throttling","text":"Throttle the number of calls per seconds to the Pretalx API Source code in pytanis/pretalx/client.py def set_throttling ( self , calls : int , seconds : int ): \"\"\"Throttle the number of calls per seconds to the Pretalx API\"\"\" logger . debug ( \"throttling\" , calls = calls , seconds = seconds ) self . _get = throttle ( calls , seconds )( self . _get_orig )","title":"set_throttling()"},{"location":"reference/pytanis/pretalx/client/#pytanis.pretalx.client.PretalxAPI.speaker","text":"Returns a specific speaker Source code in pytanis/pretalx/client.py def speaker ( self , event_slug : str , code : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Speaker : \"\"\"Returns a specific speaker\"\"\" return self . _endpoint_id ( Speaker , event_slug , \"speakers\" , code , params = params )","title":"speaker()"},{"location":"reference/pytanis/pretalx/client/#pytanis.pretalx.client.PretalxAPI.speakers","text":"Lists all speakers and their details Source code in pytanis/pretalx/client.py def speakers ( self , event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Speaker ]]: \"\"\"Lists all speakers and their details\"\"\" return self . _endpoint_lst ( Speaker , event_slug , \"speakers\" , params = params )","title":"speakers()"},{"location":"reference/pytanis/pretalx/client/#pytanis.pretalx.client.PretalxAPI.submission","text":"Returns a specific submission Source code in pytanis/pretalx/client.py def submission ( self , event_slug : str , code : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Submission : \"\"\"Returns a specific submission\"\"\" return self . _endpoint_id ( Submission , event_slug , \"submissions\" , code , params = params )","title":"submission()"},{"location":"reference/pytanis/pretalx/client/#pytanis.pretalx.client.PretalxAPI.submissions","text":"Lists all submissions and their details Source code in pytanis/pretalx/client.py def submissions ( self , event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Submission ]]: \"\"\"Lists all submissions and their details\"\"\" return self . _endpoint_lst ( Submission , event_slug , \"submissions\" , params = params )","title":"submissions()"},{"location":"reference/pytanis/pretalx/client/#pytanis.pretalx.client.PretalxAPI.tag","text":"Returns a specific tag Source code in pytanis/pretalx/client.py def tag ( self , event_slug : str , tag : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tag : \"\"\"Returns a specific tag\"\"\" return self . _endpoint_id ( Tag , event_slug , \"tags\" , tag , params = params )","title":"tag()"},{"location":"reference/pytanis/pretalx/client/#pytanis.pretalx.client.PretalxAPI.tags","text":"Lists all tags and their details Source code in pytanis/pretalx/client.py def tags ( self , event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Tag ]]: \"\"\"Lists all tags and their details\"\"\" return self . _endpoint_lst ( Tag , event_slug , \"tags\" , params = params )","title":"tags()"},{"location":"reference/pytanis/pretalx/client/#pytanis.pretalx.client.PretalxAPI.talk","text":"Returns a specific talk Source code in pytanis/pretalx/client.py def talk ( self , event_slug : str , code : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Talk : \"\"\"Returns a specific talk\"\"\" return self . _endpoint_id ( Talk , event_slug , \"talks\" , code , params = params )","title":"talk()"},{"location":"reference/pytanis/pretalx/client/#pytanis.pretalx.client.PretalxAPI.talks","text":"Lists all talks and their details Source code in pytanis/pretalx/client.py def talks ( self , event_slug : str , * , params : Optional [ Dict [ str , str ]] = None ) -> Tuple [ int , Iterator [ Talk ]]: \"\"\"Lists all talks and their details\"\"\" return self . _endpoint_lst ( Talk , event_slug , \"talks\" , params = params )","title":"talks()"},{"location":"reference/pytanis/pretalx/types/","text":"types \u00b6 Return types of the Pretalx API Documentation: https://docs.pretalx.org/api/ Attention: Quite often the API docs and the actual results of the API differ! Answer \u00b6 answer : str class-attribute \u00b6 answer_file : Optional [ str ] class-attribute \u00b6 id : int class-attribute \u00b6 options : List [ Option ] class-attribute \u00b6 person : Optional [ str ] class-attribute \u00b6 question : AnswerQuestionRef class-attribute \u00b6 review : Optional [ int ] class-attribute \u00b6 submission : Optional [ str ] class-attribute \u00b6 AnswerQuestionRef \u00b6 id : int class-attribute \u00b6 question : MultiLingualStr class-attribute \u00b6 Event \u00b6 date_from : date class-attribute \u00b6 date_to : Optional [ date ] class-attribute \u00b6 is_public : bool class-attribute \u00b6 name : MultiLingualStr class-attribute \u00b6 slug : str class-attribute \u00b6 timezone : str class-attribute \u00b6 urls : URLs class-attribute \u00b6 Me \u00b6 email : str class-attribute \u00b6 local : Optional [ str ] class-attribute \u00b6 name : str class-attribute \u00b6 timezone : str class-attribute \u00b6 MultiLingualStr \u00b6 de : Optional [ str ] class-attribute \u00b6 en : Optional [ str ] class-attribute \u00b6 Option \u00b6 answer : MultiLingualStr class-attribute \u00b6 id : int class-attribute \u00b6 Question \u00b6 contains_personal_data : bool class-attribute \u00b6 deadline : Optional [ datetime ] class-attribute \u00b6 default_answer : Optional [ str ] class-attribute \u00b6 freeze_after : Optional [ datetime ] class-attribute \u00b6 help_text : MultiLingualStr class-attribute \u00b6 id : int class-attribute \u00b6 is_public : bool class-attribute \u00b6 is_visible_to_reviewers : bool class-attribute \u00b6 max_length : Optional [ int ] class-attribute \u00b6 min_length : Optional [ int ] class-attribute \u00b6 options : List [ Option ] class-attribute \u00b6 question : MultiLingualStr class-attribute \u00b6 question_required : str class-attribute \u00b6 read_only : Optional [ bool ] class-attribute \u00b6 required : bool class-attribute \u00b6 target : str class-attribute \u00b6 variant : str class-attribute \u00b6 Resource \u00b6 description : str class-attribute \u00b6 resource : str class-attribute \u00b6 Review \u00b6 answers : List [ str ] class-attribute \u00b6 created : datetime class-attribute \u00b6 id : int class-attribute \u00b6 score : Optional [ float ] class-attribute \u00b6 submission : str class-attribute \u00b6 text : Optional [ str ] class-attribute \u00b6 updated : datetime class-attribute \u00b6 user : str class-attribute \u00b6 Room \u00b6 availabilities : Optional [ List [ RoomAvailability ]] class-attribute \u00b6 capacity : Optional [ int ] class-attribute \u00b6 description : MultiLingualStr class-attribute \u00b6 id : int class-attribute \u00b6 name : MultiLingualStr class-attribute \u00b6 position : Optional [ int ] class-attribute \u00b6 speaker_info : Optional [ MultiLingualStr ] class-attribute \u00b6 RoomAvailability \u00b6 end : datetime class-attribute \u00b6 start : datetime class-attribute \u00b6 Slot \u00b6 end : str class-attribute \u00b6 room : MultiLingualStr class-attribute \u00b6 room_id : int class-attribute \u00b6 start : str class-attribute \u00b6 Speaker \u00b6 answers : Optional [ List [ Answer ]] class-attribute \u00b6 availabilities : Optional [ List [ SpeakerAvailability ]] class-attribute \u00b6 submissions : List [ str ] class-attribute \u00b6 SpeakerAvailability \u00b6 allDay : str = Field ( Ellipsis , alias = 'all_day' ) class-attribute \u00b6 end : str class-attribute \u00b6 id : int class-attribute \u00b6 start : str class-attribute \u00b6 Submission \u00b6 abstract : str class-attribute \u00b6 answers : Optional [ List [ Answer ]] class-attribute \u00b6 code : str class-attribute \u00b6 content_locale : str class-attribute \u00b6 created : Optional [ datetime ] class-attribute \u00b6 description : str class-attribute \u00b6 do_not_record : bool class-attribute \u00b6 duration : Optional [ int ] class-attribute \u00b6 image : Optional [ str ] class-attribute \u00b6 internal_notes : Optional [ str ] class-attribute \u00b6 is_featured : bool class-attribute \u00b6 notes : Optional [ str ] class-attribute \u00b6 pending_state : Optional [ str ] class-attribute \u00b6 resources : List [ Resource ] class-attribute \u00b6 slot : Optional [ Slot ] class-attribute \u00b6 slot_count : int class-attribute \u00b6 speakers : List [ SubmissionSpeaker ] class-attribute \u00b6 state : str class-attribute \u00b6 submission_type : MultiLingualStr class-attribute \u00b6 submission_type_id : int class-attribute \u00b6 tag_ids : Optional [ List [ int ]] class-attribute \u00b6 tags : Optional [ List [ str ]] class-attribute \u00b6 title : str class-attribute \u00b6 track : Optional [ MultiLingualStr ] class-attribute \u00b6 track_id : Optional [ int ] class-attribute \u00b6 SubmissionSpeaker \u00b6 avatar : Optional [ str ] class-attribute \u00b6 biography : Optional [ str ] class-attribute \u00b6 code : str class-attribute \u00b6 email : Optional [ str ] class-attribute \u00b6 name : str class-attribute \u00b6 Tag \u00b6 color : str class-attribute \u00b6 description : MultiLingualStr class-attribute \u00b6 tag : str class-attribute \u00b6 Talk \u00b6 URLs \u00b6 base : str class-attribute \u00b6 feed : str class-attribute \u00b6 login : str class-attribute \u00b6 schedule : str class-attribute \u00b6 User \u00b6 email : str class-attribute \u00b6 name : str class-attribute \u00b6","title":"types"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types","text":"Return types of the Pretalx API Documentation: https://docs.pretalx.org/api/ Attention: Quite often the API docs and the actual results of the API differ!","title":"types"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Answer","text":"","title":"Answer"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Answer.answer","text":"","title":"answer"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Answer.answer_file","text":"","title":"answer_file"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Answer.id","text":"","title":"id"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Answer.options","text":"","title":"options"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Answer.person","text":"","title":"person"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Answer.question","text":"","title":"question"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Answer.review","text":"","title":"review"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Answer.submission","text":"","title":"submission"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.AnswerQuestionRef","text":"","title":"AnswerQuestionRef"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.AnswerQuestionRef.id","text":"","title":"id"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.AnswerQuestionRef.question","text":"","title":"question"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Event","text":"","title":"Event"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Event.date_from","text":"","title":"date_from"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Event.date_to","text":"","title":"date_to"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Event.is_public","text":"","title":"is_public"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Event.name","text":"","title":"name"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Event.slug","text":"","title":"slug"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Event.timezone","text":"","title":"timezone"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Event.urls","text":"","title":"urls"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Me","text":"","title":"Me"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Me.email","text":"","title":"email"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Me.local","text":"","title":"local"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Me.name","text":"","title":"name"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Me.timezone","text":"","title":"timezone"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.MultiLingualStr","text":"","title":"MultiLingualStr"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.MultiLingualStr.de","text":"","title":"de"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.MultiLingualStr.en","text":"","title":"en"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Option","text":"","title":"Option"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Option.answer","text":"","title":"answer"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Option.id","text":"","title":"id"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Question","text":"","title":"Question"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Question.contains_personal_data","text":"","title":"contains_personal_data"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Question.deadline","text":"","title":"deadline"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Question.default_answer","text":"","title":"default_answer"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Question.freeze_after","text":"","title":"freeze_after"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Question.help_text","text":"","title":"help_text"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Question.id","text":"","title":"id"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Question.is_public","text":"","title":"is_public"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Question.is_visible_to_reviewers","text":"","title":"is_visible_to_reviewers"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Question.max_length","text":"","title":"max_length"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Question.min_length","text":"","title":"min_length"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Question.options","text":"","title":"options"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Question.question","text":"","title":"question"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Question.question_required","text":"","title":"question_required"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Question.read_only","text":"","title":"read_only"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Question.required","text":"","title":"required"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Question.target","text":"","title":"target"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Question.variant","text":"","title":"variant"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Resource","text":"","title":"Resource"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Resource.description","text":"","title":"description"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Resource.resource","text":"","title":"resource"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Review","text":"","title":"Review"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Review.answers","text":"","title":"answers"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Review.created","text":"","title":"created"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Review.id","text":"","title":"id"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Review.score","text":"","title":"score"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Review.submission","text":"","title":"submission"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Review.text","text":"","title":"text"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Review.updated","text":"","title":"updated"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Review.user","text":"","title":"user"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Room","text":"","title":"Room"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Room.availabilities","text":"","title":"availabilities"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Room.capacity","text":"","title":"capacity"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Room.description","text":"","title":"description"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Room.id","text":"","title":"id"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Room.name","text":"","title":"name"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Room.position","text":"","title":"position"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Room.speaker_info","text":"","title":"speaker_info"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.RoomAvailability","text":"","title":"RoomAvailability"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.RoomAvailability.end","text":"","title":"end"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.RoomAvailability.start","text":"","title":"start"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Slot","text":"","title":"Slot"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Slot.end","text":"","title":"end"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Slot.room","text":"","title":"room"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Slot.room_id","text":"","title":"room_id"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Slot.start","text":"","title":"start"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Speaker","text":"","title":"Speaker"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Speaker.answers","text":"","title":"answers"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Speaker.availabilities","text":"","title":"availabilities"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Speaker.submissions","text":"","title":"submissions"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.SpeakerAvailability","text":"","title":"SpeakerAvailability"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.SpeakerAvailability.allDay","text":"","title":"allDay"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.SpeakerAvailability.end","text":"","title":"end"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.SpeakerAvailability.id","text":"","title":"id"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.SpeakerAvailability.start","text":"","title":"start"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Submission","text":"","title":"Submission"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Submission.abstract","text":"","title":"abstract"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Submission.answers","text":"","title":"answers"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Submission.code","text":"","title":"code"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Submission.content_locale","text":"","title":"content_locale"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Submission.created","text":"","title":"created"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Submission.description","text":"","title":"description"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Submission.do_not_record","text":"","title":"do_not_record"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Submission.duration","text":"","title":"duration"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Submission.image","text":"","title":"image"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Submission.internal_notes","text":"","title":"internal_notes"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Submission.is_featured","text":"","title":"is_featured"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Submission.notes","text":"","title":"notes"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Submission.pending_state","text":"","title":"pending_state"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Submission.resources","text":"","title":"resources"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Submission.slot","text":"","title":"slot"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Submission.slot_count","text":"","title":"slot_count"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Submission.speakers","text":"","title":"speakers"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Submission.state","text":"","title":"state"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Submission.submission_type","text":"","title":"submission_type"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Submission.submission_type_id","text":"","title":"submission_type_id"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Submission.tag_ids","text":"","title":"tag_ids"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Submission.tags","text":"","title":"tags"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Submission.title","text":"","title":"title"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Submission.track","text":"","title":"track"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Submission.track_id","text":"","title":"track_id"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.SubmissionSpeaker","text":"","title":"SubmissionSpeaker"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.SubmissionSpeaker.avatar","text":"","title":"avatar"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.SubmissionSpeaker.biography","text":"","title":"biography"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.SubmissionSpeaker.code","text":"","title":"code"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.SubmissionSpeaker.email","text":"","title":"email"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.SubmissionSpeaker.name","text":"","title":"name"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Tag","text":"","title":"Tag"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Tag.color","text":"","title":"color"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Tag.description","text":"","title":"description"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Tag.tag","text":"","title":"tag"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.Talk","text":"","title":"Talk"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.URLs","text":"","title":"URLs"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.URLs.base","text":"","title":"base"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.URLs.feed","text":"","title":"feed"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.URLs.login","text":"","title":"login"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.URLs.schedule","text":"","title":"schedule"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.User","text":"","title":"User"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.User.email","text":"","title":"email"},{"location":"reference/pytanis/pretalx/types/#pytanis.pretalx.types.User.name","text":"","title":"name"}]}